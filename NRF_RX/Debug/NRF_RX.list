
NRF_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000640c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006820  08006820  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006828  08006828  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000007c  080068ac  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080068ac  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d60  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f5  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00034308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00035380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d27  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124d1  00000000  00000000  0004f037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4ae  00000000  00000000  00061508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe9b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc4  00000000  00000000  000fea08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006594 	.word	0x08006594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006594 	.word	0x08006594

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_1


void CS_Select (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2102      	movs	r1, #2
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <CS_Select+0x14>)
 800058e:	f002 fa13 	bl	80029b8 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020400 	.word	0x40020400

0800059c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <CS_UnSelect+0x14>)
 80005a6:	f002 fa07 	bl	80029b8 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020400 	.word	0x40020400

080005b4 <CE_Enable>:


void CE_Enable (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2120      	movs	r1, #32
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <CE_Enable+0x14>)
 80005be:	f002 f9fb 	bl	80029b8 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020800 	.word	0x40020800

080005cc <CE_Disable>:

void CE_Disable (void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2120      	movs	r1, #32
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <CE_Disable+0x14>)
 80005d6:	f002 f9ef 	bl	80029b8 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020800 	.word	0x40020800

080005e4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000602:	f7ff ffbf 	bl	8000584 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	2202      	movs	r2, #2
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <nrf24_WriteReg+0x40>)
 8000612:	f002 ff3e 	bl	8003492 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000616:	f7ff ffc1 	bl	800059c <CS_UnSelect>
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000e4 	.word	0x200000e4

08000628 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	b2db      	uxtb	r3, r3
 800063e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000640:	f7ff ffa0 	bl	8000584 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000644:	f107 0114 	add.w	r1, r7, #20
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2201      	movs	r2, #1
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <nrf24_WriteRegMulti+0x48>)
 800064e:	f002 ff20 	bl	8003492 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	b29a      	uxth	r2, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <nrf24_WriteRegMulti+0x48>)
 800065e:	f002 ff18 	bl	8003492 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000662:	f7ff ff9b 	bl	800059c <CS_UnSelect>
}
 8000666:	bf00      	nop
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000e4 	.word	0x200000e4

08000674 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800067e:	2300      	movs	r3, #0
 8000680:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000682:	f7ff ff7f 	bl	8000584 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000686:	1df9      	adds	r1, r7, #7
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	2201      	movs	r2, #1
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <nrf24_ReadReg+0x3c>)
 800068e:	f002 ff00 	bl	8003492 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000692:	f107 010f 	add.w	r1, r7, #15
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <nrf24_ReadReg+0x3c>)
 800069c:	f003 f835 	bl	800370a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006a0:	f7ff ff7c 	bl	800059c <CS_UnSelect>

	return data;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000e4 	.word	0x200000e4

080006b4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006c2:	f7ff ff5f 	bl	8000584 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006c6:	f107 010f 	add.w	r1, r7, #15
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	2201      	movs	r2, #1
 80006ce:	4808      	ldr	r0, [pc, #32]	; (80006f0 <nrf24_ReadReg_Multi+0x3c>)
 80006d0:	f002 fedf 	bl	8003492 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	68b9      	ldr	r1, [r7, #8]
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <nrf24_ReadReg_Multi+0x3c>)
 80006e0:	f003 f813 	bl	800370a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006e4:	f7ff ff5a 	bl	800059c <CS_UnSelect>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000e4 	.word	0x200000e4

080006f4 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006fe:	f7ff ff41 	bl	8000584 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000702:	1df9      	adds	r1, r7, #7
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	2201      	movs	r2, #1
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <nrfsendCmd+0x28>)
 800070a:	f002 fec2 	bl	8003492 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800070e:	f7ff ff45 	bl	800059c <CS_UnSelect>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e4 	.word	0x200000e4

08000720 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d104      	bne.n	800073a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000730:	2100      	movs	r1, #0
 8000732:	2007      	movs	r0, #7
 8000734:	f7ff ff56 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000738:	e090      	b.n	800085c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b17      	cmp	r3, #23
 800073e:	d104      	bne.n	800074a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000740:	2111      	movs	r1, #17
 8000742:	2017      	movs	r0, #23
 8000744:	f7ff ff4e 	bl	80005e4 <nrf24_WriteReg>
}
 8000748:	e088      	b.n	800085c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800074a:	2108      	movs	r1, #8
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff49 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000752:	213f      	movs	r1, #63	; 0x3f
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ff45 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800075a:	2103      	movs	r1, #3
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff ff41 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000762:	2103      	movs	r1, #3
 8000764:	2003      	movs	r0, #3
 8000766:	f7ff ff3d 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800076a:	2103      	movs	r1, #3
 800076c:	2004      	movs	r0, #4
 800076e:	f7ff ff39 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000772:	2102      	movs	r1, #2
 8000774:	2005      	movs	r0, #5
 8000776:	f7ff ff35 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800077a:	210e      	movs	r1, #14
 800077c:	2006      	movs	r0, #6
 800077e:	f7ff ff31 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000782:	2100      	movs	r1, #0
 8000784:	2007      	movs	r0, #7
 8000786:	f7ff ff2d 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800078a:	2100      	movs	r1, #0
 800078c:	2008      	movs	r0, #8
 800078e:	f7ff ff29 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000792:	2100      	movs	r1, #0
 8000794:	2009      	movs	r0, #9
 8000796:	f7ff ff25 	bl	80005e4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800079a:	4a32      	ldr	r2, [pc, #200]	; (8000864 <nrf24_reset+0x144>)
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a4:	6018      	str	r0, [r3, #0]
 80007a6:	3304      	adds	r3, #4
 80007a8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2205      	movs	r2, #5
 80007b0:	4619      	mov	r1, r3
 80007b2:	200a      	movs	r0, #10
 80007b4:	f7ff ff38 	bl	8000628 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80007b8:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <nrf24_reset+0x148>)
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c2:	6018      	str	r0, [r3, #0]
 80007c4:	3304      	adds	r3, #4
 80007c6:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2205      	movs	r2, #5
 80007ce:	4619      	mov	r1, r3
 80007d0:	200b      	movs	r0, #11
 80007d2:	f7ff ff29 	bl	8000628 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80007d6:	21c3      	movs	r1, #195	; 0xc3
 80007d8:	200c      	movs	r0, #12
 80007da:	f7ff ff03 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80007de:	21c4      	movs	r1, #196	; 0xc4
 80007e0:	200d      	movs	r0, #13
 80007e2:	f7ff feff 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80007e6:	21c5      	movs	r1, #197	; 0xc5
 80007e8:	200e      	movs	r0, #14
 80007ea:	f7ff fefb 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80007ee:	21c6      	movs	r1, #198	; 0xc6
 80007f0:	200f      	movs	r0, #15
 80007f2:	f7ff fef7 	bl	80005e4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <nrf24_reset+0x144>)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000800:	6018      	str	r0, [r3, #0]
 8000802:	3304      	adds	r3, #4
 8000804:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2205      	movs	r2, #5
 800080c:	4619      	mov	r1, r3
 800080e:	2010      	movs	r0, #16
 8000810:	f7ff ff0a 	bl	8000628 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2011      	movs	r0, #17
 8000818:	f7ff fee4 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800081c:	2100      	movs	r1, #0
 800081e:	2012      	movs	r0, #18
 8000820:	f7ff fee0 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000824:	2100      	movs	r1, #0
 8000826:	2013      	movs	r0, #19
 8000828:	f7ff fedc 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800082c:	2100      	movs	r1, #0
 800082e:	2014      	movs	r0, #20
 8000830:	f7ff fed8 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000834:	2100      	movs	r1, #0
 8000836:	2015      	movs	r0, #21
 8000838:	f7ff fed4 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800083c:	2100      	movs	r1, #0
 800083e:	2016      	movs	r0, #22
 8000840:	f7ff fed0 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000844:	2111      	movs	r1, #17
 8000846:	2017      	movs	r0, #23
 8000848:	f7ff fecc 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800084c:	2100      	movs	r1, #0
 800084e:	201c      	movs	r0, #28
 8000850:	f7ff fec8 	bl	80005e4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000854:	2100      	movs	r1, #0
 8000856:	201d      	movs	r0, #29
 8000858:	f7ff fec4 	bl	80005e4 <nrf24_WriteReg>
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	080065ac 	.word	0x080065ac
 8000868:	080065b4 	.word	0x080065b4

0800086c <NRF24_Init>:




void NRF24_Init (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000870:	f7ff feac 	bl	80005cc <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff53 	bl	8000720 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800087a:	2100      	movs	r1, #0
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff feb1 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000882:	2100      	movs	r1, #0
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fead 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800088a:	2100      	movs	r1, #0
 800088c:	2002      	movs	r0, #2
 800088e:	f7ff fea9 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000892:	2103      	movs	r1, #3
 8000894:	2003      	movs	r0, #3
 8000896:	f7ff fea5 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800089a:	2100      	movs	r1, #0
 800089c:	2004      	movs	r0, #4
 800089e:	f7ff fea1 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80008a2:	2100      	movs	r1, #0
 80008a4:	2005      	movs	r0, #5
 80008a6:	f7ff fe9d 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80008aa:	210e      	movs	r1, #14
 80008ac:	2006      	movs	r0, #6
 80008ae:	f7ff fe99 	bl	80005e4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80008b2:	f7ff fe7f 	bl	80005b4 <CE_Enable>

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80008c6:	f7ff fe81 	bl	80005cc <CE_Disable>

	nrf24_reset (STATUS);
 80008ca:	2007      	movs	r0, #7
 80008cc:	f7ff ff28 	bl	8000720 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	4619      	mov	r1, r3
 80008d4:	2005      	movs	r0, #5
 80008d6:	f7ff fe85 	bl	80005e4 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff feca 	bl	8000674 <nrf24_ReadReg>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4619      	mov	r1, r3
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff fe77 	bl	80005e4 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80008f6:	2205      	movs	r2, #5
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	200b      	movs	r0, #11
 80008fc:	f7ff fe94 	bl	8000628 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000900:	21ee      	movs	r1, #238	; 0xee
 8000902:	200c      	movs	r0, #12
 8000904:	f7ff fe6e 	bl	80005e4 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000908:	2120      	movs	r1, #32
 800090a:	2013      	movs	r0, #19
 800090c:	f7ff fe6a 	bl	80005e4 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff feaf 	bl	8000674 <nrf24_ReadReg>
 8000916:	4603      	mov	r3, r0
 8000918:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	f043 0303 	orr.w	r3, r3, #3
 8000920:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	4619      	mov	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff fe5c 	bl	80005e4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800092c:	f7ff fe42 	bl	80005b4 <CE_Enable>
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000940:	2007      	movs	r0, #7
 8000942:	f7ff fe97 	bl	8000674 <nrf24_ReadReg>
 8000946:	4603      	mov	r3, r0
 8000948:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00b      	beq.n	800096c <isDataAvailable+0x34>
 8000954:	7bfa      	ldrb	r2, [r7, #15]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4013      	ands	r3, r2
 800095c:	2b00      	cmp	r3, #0
 800095e:	d005      	beq.n	800096c <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	2007      	movs	r0, #7
 8000964:	f7ff fe3e 	bl	80005e4 <nrf24_WriteReg>

		return 1;
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <isDataAvailable+0x36>
	}

	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000984:	f7ff fdfe 	bl	8000584 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000988:	2361      	movs	r3, #97	; 0x61
 800098a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800098c:	f107 010f 	add.w	r1, r7, #15
 8000990:	2364      	movs	r3, #100	; 0x64
 8000992:	2201      	movs	r2, #1
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <NRF24_Receive+0x50>)
 8000996:	f002 fd7c 	bl	8003492 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	2220      	movs	r2, #32
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <NRF24_Receive+0x50>)
 80009a4:	f002 feb1 	bl	800370a <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80009a8:	f7ff fdf8 	bl	800059c <CS_UnSelect>

	HAL_Delay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f001 f969 	bl	8001c84 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80009b2:	23e2      	movs	r3, #226	; 0xe2
 80009b4:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe9b 	bl	80006f4 <nrfsendCmd>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000e4 	.word	0x200000e4

080009cc <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e00c      	b.n	80009f4 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	18d4      	adds	r4, r2, r3
 80009e4:	4608      	mov	r0, r1
 80009e6:	f7ff fe45 	bl	8000674 <nrf24_ReadReg>
 80009ea:	4603      	mov	r3, r0
 80009ec:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b09      	cmp	r3, #9
 80009f8:	ddef      	ble.n	80009da <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	330a      	adds	r3, #10
 80009fe:	2205      	movs	r2, #5
 8000a00:	4619      	mov	r1, r3
 8000a02:	200a      	movs	r0, #10
 8000a04:	f7ff fe56 	bl	80006b4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	330f      	adds	r3, #15
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	4619      	mov	r1, r3
 8000a10:	200b      	movs	r0, #11
 8000a12:	f7ff fe4f 	bl	80006b4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f103 0414 	add.w	r4, r3, #20
 8000a1c:	200c      	movs	r0, #12
 8000a1e:	f7ff fe29 	bl	8000674 <nrf24_ReadReg>
 8000a22:	4603      	mov	r3, r0
 8000a24:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f103 0415 	add.w	r4, r3, #21
 8000a2c:	200d      	movs	r0, #13
 8000a2e:	f7ff fe21 	bl	8000674 <nrf24_ReadReg>
 8000a32:	4603      	mov	r3, r0
 8000a34:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f103 0416 	add.w	r4, r3, #22
 8000a3c:	200e      	movs	r0, #14
 8000a3e:	f7ff fe19 	bl	8000674 <nrf24_ReadReg>
 8000a42:	4603      	mov	r3, r0
 8000a44:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f103 0417 	add.w	r4, r3, #23
 8000a4c:	200f      	movs	r0, #15
 8000a4e:	f7ff fe11 	bl	8000674 <nrf24_ReadReg>
 8000a52:	4603      	mov	r3, r0
 8000a54:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3318      	adds	r3, #24
 8000a5a:	2205      	movs	r2, #5
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f7ff fe28 	bl	80006b4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000a64:	231d      	movs	r3, #29
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	e00e      	b.n	8000a88 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b0c      	subs	r3, #12
 8000a70:	b2d9      	uxtb	r1, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	18d4      	adds	r4, r2, r3
 8000a78:	4608      	mov	r0, r1
 8000a7a:	f7ff fdfb 	bl	8000674 <nrf24_ReadReg>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	2b25      	cmp	r3, #37	; 0x25
 8000a8c:	dded      	ble.n	8000a6a <NRF24_ReadAll+0x9e>
	}

}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}

08000a98 <HAL_GPIO_EXTI_Callback>:
 * 	SWITCH CASE DONGUSUNDE MOD SECIMI. NRF MODDA RF VERICIDEN GELEN
 * 	VERILERE GORE SERVOLAR SURULUR. BOARD MODDA ISE ALICI OLAN DEVREDEKI
 * 	POTANSIYOMETRE KULLANILARAK SERVOLAR SURULEBILIR.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_SOL_Pin)
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d10e      	bne.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		MOD_State_SWC = NFR_MOD;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ab6:	f001 ff7f 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ac2:	f001 ff79 	bl	80029b8 <HAL_GPIO_WritePin>
	}
	if(GPIO_Pin == BTN_SAG_Pin)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	2b80      	cmp	r3, #128	; 0x80
 8000aca:	d10e      	bne.n	8000aea <HAL_GPIO_EXTI_Callback+0x52>
	{
		MOD_State_SWC = BOARD_MOD;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ada:	f001 ff6d 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ae6:	f001 ff67 	bl	80029b8 <HAL_GPIO_WritePin>
	}
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000098 	.word	0x20000098
 8000af8:	40020c00 	.word	0x40020c00

08000afc <verileri_isle>:
 * ICIN 250-1250 ARASINA OLCEKLER. JOYSTICK'DEN GELEN receivedNumber2 VE
 * receivedNumber3 DEGERLERINI DE DUZENLEYIP NIHAI DURUMDA KULLANILACAK OLAN
 * servo_drive2Rev VE servo_drive3Rev DEGERLERINE DONUSTURUR.
 */
void verileri_isle()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	//receivedNumber = atoi(RxData);

	//receivedNumber = strtol((char*)RxData, &endptr, 10);

	ptr = strtok(RxData, ayirici);
 8000b00:	4966      	ldr	r1, [pc, #408]	; (8000c9c <verileri_isle+0x1a0>)
 8000b02:	4867      	ldr	r0, [pc, #412]	; (8000ca0 <verileri_isle+0x1a4>)
 8000b04:	f004 fc64 	bl	80053d0 <strtok>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4a66      	ldr	r2, [pc, #408]	; (8000ca4 <verileri_isle+0x1a8>)
 8000b0c:	6013      	str	r3, [r2, #0]
	receivedNumber = strtol(ptr, NULL, 10);
 8000b0e:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <verileri_isle+0x1a8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	220a      	movs	r2, #10
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fd38 	bl	800558c <strtol>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <verileri_isle+0x1ac>)
 8000b22:	801a      	strh	r2, [r3, #0]
	final = receivedNumber;
 8000b24:	4b60      	ldr	r3, [pc, #384]	; (8000ca8 <verileri_isle+0x1ac>)
 8000b26:	881a      	ldrh	r2, [r3, #0]
 8000b28:	4b60      	ldr	r3, [pc, #384]	; (8000cac <verileri_isle+0x1b0>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	receivedNumber = 0;
 8000b2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <verileri_isle+0x1ac>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
	servo_drive = ((final - 0) * (1250 - 250)) / (4096 - 0) + 250;
 8000b32:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <verileri_isle+0x1b0>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da01      	bge.n	8000b48 <verileri_isle+0x4c>
 8000b44:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000b48:	131b      	asrs	r3, r3, #12
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	33fa      	adds	r3, #250	; 0xfa
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <verileri_isle+0x1b4>)
 8000b52:	801a      	strh	r2, [r3, #0]

	ptr = strtok(NULL, ayirici);
 8000b54:	4951      	ldr	r1, [pc, #324]	; (8000c9c <verileri_isle+0x1a0>)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f004 fc3a 	bl	80053d0 <strtok>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a51      	ldr	r2, [pc, #324]	; (8000ca4 <verileri_isle+0x1a8>)
 8000b60:	6013      	str	r3, [r2, #0]
	receivedNumber2 = strtol(ptr, NULL, 10);
 8000b62:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <verileri_isle+0x1a8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	220a      	movs	r2, #10
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 fd0e 	bl	800558c <strtol>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <verileri_isle+0x1b8>)
 8000b76:	801a      	strh	r2, [r3, #0]
	final2 = receivedNumber2;
 8000b78:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <verileri_isle+0x1b8>)
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	4b4e      	ldr	r3, [pc, #312]	; (8000cb8 <verileri_isle+0x1bc>)
 8000b7e:	801a      	strh	r2, [r3, #0]
	receivedNumber2 = 0;
 8000b80:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <verileri_isle+0x1b8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
	servo_drive2 = ((final2 - 0) * (1250 - 250)) / (4096 - 0) + 250;
 8000b86:	4b4c      	ldr	r3, [pc, #304]	; (8000cb8 <verileri_isle+0x1bc>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da01      	bge.n	8000b9c <verileri_isle+0xa0>
 8000b98:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000b9c:	131b      	asrs	r3, r3, #12
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	33fa      	adds	r3, #250	; 0xfa
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <verileri_isle+0x1c0>)
 8000ba6:	801a      	strh	r2, [r3, #0]

	ptr = strtok(NULL, ayirici);
 8000ba8:	493c      	ldr	r1, [pc, #240]	; (8000c9c <verileri_isle+0x1a0>)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f004 fc10 	bl	80053d0 <strtok>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a3c      	ldr	r2, [pc, #240]	; (8000ca4 <verileri_isle+0x1a8>)
 8000bb4:	6013      	str	r3, [r2, #0]
	receivedNumber3 = strtol(ptr, NULL, 10);
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <verileri_isle+0x1a8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	220a      	movs	r2, #10
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fce4 	bl	800558c <strtol>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b3d      	ldr	r3, [pc, #244]	; (8000cc0 <verileri_isle+0x1c4>)
 8000bca:	801a      	strh	r2, [r3, #0]
	final3 = receivedNumber3;
 8000bcc:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <verileri_isle+0x1c4>)
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <verileri_isle+0x1c8>)
 8000bd2:	801a      	strh	r2, [r3, #0]
	receivedNumber3 = 0;
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <verileri_isle+0x1c4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]
	servo_drive3 = ((final3 - 0) * (1250 - 250)) / (4096 - 0) + 250;
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <verileri_isle+0x1c8>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	fb02 f303 	mul.w	r3, r2, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da01      	bge.n	8000bf0 <verileri_isle+0xf4>
 8000bec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bf0:	131b      	asrs	r3, r3, #12
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	33fa      	adds	r3, #250	; 0xfa
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <verileri_isle+0x1cc>)
 8000bfa:	801a      	strh	r2, [r3, #0]

	// *** SERVO 2 ICIN JOYSTICK VERILERINI DUZENLEME ***
	if(servo_drive2 < 500)
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <verileri_isle+0x1c0>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c04:	d20c      	bcs.n	8000c20 <verileri_isle+0x124>
	{
		servo_drive2Rev = servo_drive2Rev - 3;
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <verileri_isle+0x1d0>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3b03      	subs	r3, #3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <verileri_isle+0x1d0>)
 8000c10:	801a      	strh	r2, [r3, #0]
		if(servo_drive2Rev <= 250)
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <verileri_isle+0x1d0>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	2bfa      	cmp	r3, #250	; 0xfa
 8000c18:	d802      	bhi.n	8000c20 <verileri_isle+0x124>
		{
			servo_drive2Rev = 250;
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <verileri_isle+0x1d0>)
 8000c1c:	22fa      	movs	r2, #250	; 0xfa
 8000c1e:	801a      	strh	r2, [r3, #0]
		}
	}
	if(servo_drive2 > 900)
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <verileri_isle+0x1c0>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000c28:	d90f      	bls.n	8000c4a <verileri_isle+0x14e>
	{
		servo_drive2Rev = servo_drive2Rev + 3;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <verileri_isle+0x1d0>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	3303      	adds	r3, #3
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <verileri_isle+0x1d0>)
 8000c34:	801a      	strh	r2, [r3, #0]
		if(servo_drive2Rev >= 1250)
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <verileri_isle+0x1d0>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d903      	bls.n	8000c4a <verileri_isle+0x14e>
		{
			servo_drive2Rev = 1250;
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <verileri_isle+0x1d0>)
 8000c44:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000c48:	801a      	strh	r2, [r3, #0]
		}
	}

	// *** SERVO 3 ICIN JOYSTICK VERILERINI DUZENLEME ***
	if(servo_drive3 < 500)
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <verileri_isle+0x1cc>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c52:	d20c      	bcs.n	8000c6e <verileri_isle+0x172>
	{
		servo_drive3Rev = servo_drive3Rev - 3;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c5e:	801a      	strh	r2, [r3, #0]
		if(servo_drive3Rev <= 250)
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	2bfa      	cmp	r3, #250	; 0xfa
 8000c66:	d802      	bhi.n	8000c6e <verileri_isle+0x172>
		{
			servo_drive3Rev = 250;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c6a:	22fa      	movs	r2, #250	; 0xfa
 8000c6c:	801a      	strh	r2, [r3, #0]
		}

	}
	if(servo_drive3 > 900)
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <verileri_isle+0x1cc>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000c76:	d90f      	bls.n	8000c98 <verileri_isle+0x19c>
	{
		servo_drive3Rev = servo_drive3Rev + 3;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c82:	801a      	strh	r2, [r3, #0]
		if(servo_drive3Rev >= 1250)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d903      	bls.n	8000c98 <verileri_isle+0x19c>
		{
			servo_drive3Rev = 1250;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <verileri_isle+0x1d4>)
 8000c92:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000c96:	801a      	strh	r2, [r3, #0]
		}

	}

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	080065bc 	.word	0x080065bc
 8000ca0:	20000258 	.word	0x20000258
 8000ca4:	200002a4 	.word	0x200002a4
 8000ca8:	200002a8 	.word	0x200002a8
 8000cac:	200002ae 	.word	0x200002ae
 8000cb0:	200002b0 	.word	0x200002b0
 8000cb4:	200002aa 	.word	0x200002aa
 8000cb8:	200002b2 	.word	0x200002b2
 8000cbc:	200002b4 	.word	0x200002b4
 8000cc0:	200002ac 	.word	0x200002ac
 8000cc4:	200002b6 	.word	0x200002b6
 8000cc8:	200002b8 	.word	0x200002b8
 8000ccc:	20000006 	.word	0x20000006
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 ff62 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f8c8 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f000 fb6c 	bl	80013bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ce4:	f000 f97e 	bl	8000fe4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ce8:	f000 fb3e 	bl	8001368 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000cec:	f000 f9b0 	bl	8001050 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000cf0:	f000 f926 	bl	8000f40 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cf4:	f000 fa4c 	bl	8001190 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cf8:	f000 fac0 	bl	800127c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000cfc:	484e      	ldr	r0, [pc, #312]	; (8000e38 <main+0x164>)
 8000cfe:	f001 f829 	bl	8001d54 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	484d      	ldr	r0, [pc, #308]	; (8000e3c <main+0x168>)
 8000d06:	f003 faa9 	bl	800425c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	484c      	ldr	r0, [pc, #304]	; (8000e40 <main+0x16c>)
 8000d0e:	f003 faa5 	bl	800425c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d12:	2100      	movs	r1, #0
 8000d14:	484b      	ldr	r0, [pc, #300]	; (8000e44 <main+0x170>)
 8000d16:	f003 faa1 	bl	800425c <HAL_TIM_PWM_Start>

  //HAL_SPI_Receive_IT(&hspi1, RxData, 10);

  NRF24_Init();
 8000d1a:	f7ff fda7 	bl	800086c <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 8000d1e:	210a      	movs	r1, #10
 8000d20:	4849      	ldr	r0, [pc, #292]	; (8000e48 <main+0x174>)
 8000d22:	f7ff fdca 	bl	80008ba <NRF24_RxMode>
  NRF24_ReadAll(data);
 8000d26:	4849      	ldr	r0, [pc, #292]	; (8000e4c <main+0x178>)
 8000d28:	f7ff fe50 	bl	80009cc <NRF24_ReadAll>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (MOD_State_SWC) {
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <main+0x17c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <main+0x66>
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d04e      	beq.n	8000dd6 <main+0x102>
				  HAL_Delay(1);
			  }
			break;

		default:
			break;
 8000d38:	e07d      	b.n	8000e36 <main+0x162>
			if (isDataAvailable(2) == 1)
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f7ff fdfc 	bl	8000938 <isDataAvailable>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d140      	bne.n	8000dc8 <main+0xf4>
				  NRF24_Receive(RxData);
 8000d46:	4843      	ldr	r0, [pc, #268]	; (8000e54 <main+0x180>)
 8000d48:	f7ff fe16 	bl	8000978 <NRF24_Receive>
				  HAL_GPIO_TogglePin(GPIOD, LED3_Pin | LED4_Pin);
 8000d4c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000d50:	4841      	ldr	r0, [pc, #260]	; (8000e58 <main+0x184>)
 8000d52:	f001 fe4a 	bl	80029ea <HAL_GPIO_TogglePin>
				  verileri_isle();
 8000d56:	f7ff fed1 	bl	8000afc <verileri_isle>
				  if(servo_drive >= 250 && servo_drive <= 1250)
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <main+0x188>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	2bf9      	cmp	r3, #249	; 0xf9
 8000d60:	d90d      	bls.n	8000d7e <main+0xaa>
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <main+0x188>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d807      	bhi.n	8000d7e <main+0xaa>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, servo_drive);
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <main+0x188>)
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <main+0x168>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f000 ff83 	bl	8001c84 <HAL_Delay>
				  if(servo_drive2Rev >= 250 && servo_drive2Rev <= 1250)
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <main+0x18c>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	2bf9      	cmp	r3, #249	; 0xf9
 8000d84:	d90d      	bls.n	8000da2 <main+0xce>
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <main+0x18c>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d807      	bhi.n	8000da2 <main+0xce>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, servo_drive2Rev);
 8000d92:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <main+0x18c>)
 8000d94:	881a      	ldrh	r2, [r3, #0]
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <main+0x16c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 ff71 	bl	8001c84 <HAL_Delay>
				  if(servo_drive3Rev >= 250 && servo_drive3Rev <= 1250)
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <main+0x190>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	2bf9      	cmp	r3, #249	; 0xf9
 8000da8:	d942      	bls.n	8000e30 <main+0x15c>
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <main+0x190>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d83c      	bhi.n	8000e30 <main+0x15c>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servo_drive3Rev);
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <main+0x190>)
 8000db8:	881a      	ldrh	r2, [r3, #0]
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <main+0x170>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 ff5f 	bl	8001c84 <HAL_Delay>
			break;
 8000dc6:	e033      	b.n	8000e30 <main+0x15c>
					HAL_GPIO_WritePin(GPIOD, LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000dce:	4822      	ldr	r0, [pc, #136]	; (8000e58 <main+0x184>)
 8000dd0:	f001 fdf2 	bl	80029b8 <HAL_GPIO_WritePin>
			break;
 8000dd4:	e02c      	b.n	8000e30 <main+0x15c>
			HAL_GPIO_WritePin(GPIOD, LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000ddc:	481e      	ldr	r0, [pc, #120]	; (8000e58 <main+0x184>)
 8000dde:	f001 fdeb 	bl	80029b8 <HAL_GPIO_WritePin>
			if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000de2:	2164      	movs	r1, #100	; 0x64
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <main+0x164>)
 8000de6:	f001 f869 	bl	8001ebc <HAL_ADC_PollForConversion>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d121      	bne.n	8000e34 <main+0x160>
				  PC2_Read = HAL_ADC_GetValue(&hadc1);
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <main+0x164>)
 8000df2:	f001 f8ee 	bl	8001fd2 <HAL_ADC_GetValue>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <main+0x194>)
 8000dfc:	801a      	strh	r2, [r3, #0]
				  PC2_Scl = PC2_Read + 250;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <main+0x194>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	33fa      	adds	r3, #250	; 0xfa
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <main+0x198>)
 8000e08:	801a      	strh	r2, [r3, #0]
				  if(PC2_Scl >= 1250)
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <main+0x198>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d903      	bls.n	8000e1e <main+0x14a>
					  PC2_Scl = 1250;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <main+0x198>)
 8000e18:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000e1c:	801a      	strh	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PC2_Scl);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <main+0x198>)
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <main+0x168>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_Delay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f000 ff2b 	bl	8001c84 <HAL_Delay>
			break;
 8000e2e:	e001      	b.n	8000e34 <main+0x160>
			break;
 8000e30:	bf00      	nop
 8000e32:	e77b      	b.n	8000d2c <main+0x58>
			break;
 8000e34:	bf00      	nop
	  switch (MOD_State_SWC) {
 8000e36:	e779      	b.n	8000d2c <main+0x58>
 8000e38:	2000009c 	.word	0x2000009c
 8000e3c:	2000013c 	.word	0x2000013c
 8000e40:	20000184 	.word	0x20000184
 8000e44:	200001cc 	.word	0x200001cc
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	2000026c 	.word	0x2000026c
 8000e50:	20000098 	.word	0x20000098
 8000e54:	20000258 	.word	0x20000258
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	200002b0 	.word	0x200002b0
 8000e60:	20000006 	.word	0x20000006
 8000e64:	20000008 	.word	0x20000008
 8000e68:	2000029e 	.word	0x2000029e
 8000e6c:	200002a0 	.word	0x200002a0

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	; 0x50
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	2230      	movs	r2, #48	; 0x30
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 fa9e 	bl	80053c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <SystemClock_Config+0xc8>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <SystemClock_Config+0xc8>)
 8000e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <SystemClock_Config+0xc8>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <SystemClock_Config+0xcc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <SystemClock_Config+0xcc>)
 8000eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <SystemClock_Config+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ee4:	2348      	movs	r3, #72	; 0x48
 8000ee6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000eec:	2308      	movs	r3, #8
 8000eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fdab 	bl	8002a50 <HAL_RCC_OscConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f00:	f000 fb2c 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	230f      	movs	r3, #15
 8000f06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 f80d 	bl	8002f40 <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f2c:	f000 fb16 	bl	800155c <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3750      	adds	r7, #80	; 0x50
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_ADC1_Init+0x9c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0xa0>)
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000fa2:	f000 fe93 	bl	8001ccc <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fac:	f000 fad6 	bl	800155c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000fc2:	f001 f813 	bl	8001fec <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fcc:	f000 fac6 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000009c 	.word	0x2000009c
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	0f000001 	.word	0x0f000001

08000fe4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_SPI1_Init+0x64>)
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <MX_SPI1_Init+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001014:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI1_Init+0x64>)
 8001018:	2218      	movs	r2, #24
 800101a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI1_Init+0x64>)
 8001030:	220a      	movs	r2, #10
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_SPI1_Init+0x64>)
 8001036:	f002 f9a3 	bl	8003380 <HAL_SPI_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001040:	f000 fa8c 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000e4 	.word	0x200000e4
 800104c:	40013000 	.word	0x40013000

08001050 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	; 0x58
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f004 f999 	bl	80053c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <MX_TIM1_Init+0x138>)
 8001090:	4a3e      	ldr	r2, [pc, #248]	; (800118c <MX_TIM1_Init+0x13c>)
 8001092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143;
 8001094:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <MX_TIM1_Init+0x138>)
 8001096:	228f      	movs	r2, #143	; 0x8f
 8001098:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <MX_TIM1_Init+0x138>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <MX_TIM1_Init+0x138>)
 80010a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80010a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <MX_TIM1_Init+0x138>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <MX_TIM1_Init+0x138>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b34      	ldr	r3, [pc, #208]	; (8001188 <MX_TIM1_Init+0x138>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ba:	4833      	ldr	r0, [pc, #204]	; (8001188 <MX_TIM1_Init+0x138>)
 80010bc:	f003 f826 	bl	800410c <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010c6:	f000 fa49 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d4:	4619      	mov	r1, r3
 80010d6:	482c      	ldr	r0, [pc, #176]	; (8001188 <MX_TIM1_Init+0x138>)
 80010d8:	f003 fa32 	bl	8004540 <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010e2:	f000 fa3b 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e6:	4828      	ldr	r0, [pc, #160]	; (8001188 <MX_TIM1_Init+0x138>)
 80010e8:	f003 f85f 	bl	80041aa <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010f2:	f000 fa33 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001102:	4619      	mov	r1, r3
 8001104:	4820      	ldr	r0, [pc, #128]	; (8001188 <MX_TIM1_Init+0x138>)
 8001106:	f003 fdaf 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001110:	f000 fa24 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <MX_TIM1_Init+0x138>)
 800113a:	f003 f93f 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001144:	f000 fa0a 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM1_Init+0x138>)
 800116c:	f003 fdea 	bl	8004d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001176:	f000 f9f1 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM1_Init+0x138>)
 800117c:	f000 fafc 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8001180:	bf00      	nop
 8001182:	3758      	adds	r7, #88	; 0x58
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000013c 	.word	0x2000013c
 800118c:	40010000 	.word	0x40010000

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011ca:	228f      	movs	r2, #143	; 0x8f
 80011cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e8:	4823      	ldr	r0, [pc, #140]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011ea:	f002 ff8f 	bl	800410c <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011f4:	f000 f9b2 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	4619      	mov	r1, r3
 8001204:	481c      	ldr	r0, [pc, #112]	; (8001278 <MX_TIM2_Init+0xe8>)
 8001206:	f003 f99b 	bl	8004540 <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001210:	f000 f9a4 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001214:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_TIM2_Init+0xe8>)
 8001216:	f002 ffc8 	bl	80041aa <HAL_TIM_PWM_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001220:	f000 f99c 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122c:	f107 0320 	add.w	r3, r7, #32
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_TIM2_Init+0xe8>)
 8001234:	f003 fd18 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800123e:	f000 f98d 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001242:	2360      	movs	r3, #96	; 0x60
 8001244:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM2_Init+0xe8>)
 800125a:	f003 f8af 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001264:	f000 f97a 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM2_Init+0xe8>)
 800126a:	f000 fa85 	bl	8001778 <HAL_TIM_MspPostInit>

}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000184 	.word	0x20000184

0800127c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 143;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012b4:	228f      	movs	r2, #143	; 0x8f
 80012b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80012c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012d4:	f002 ff1a 	bl	800410c <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012de:	f000 f93d 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ec:	4619      	mov	r1, r3
 80012ee:	481c      	ldr	r0, [pc, #112]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012f0:	f003 f926 	bl	8004540 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012fa:	f000 f92f 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fe:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM3_Init+0xe4>)
 8001300:	f002 ff53 	bl	80041aa <HAL_TIM_PWM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800130a:	f000 f927 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <MX_TIM3_Init+0xe4>)
 800131e:	f003 fca3 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001328:	f000 f918 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132c:	2360      	movs	r3, #96	; 0x60
 800132e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM3_Init+0xe4>)
 8001344:	f003 f83a 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800134e:	f000 f905 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM3_Init+0xe4>)
 8001354:	f000 fa10 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3738      	adds	r7, #56	; 0x38
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001cc 	.word	0x200001cc
 8001364:	40000400 	.word	0x40000400

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f003 fd22 	bl	8004de8 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f8d7 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000214 	.word	0x20000214
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <MX_GPIO_Init+0x190>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a5c      	ldr	r2, [pc, #368]	; (800154c <MX_GPIO_Init+0x190>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <MX_GPIO_Init+0x190>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <MX_GPIO_Init+0x190>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a55      	ldr	r2, [pc, #340]	; (800154c <MX_GPIO_Init+0x190>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <MX_GPIO_Init+0x190>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b4f      	ldr	r3, [pc, #316]	; (800154c <MX_GPIO_Init+0x190>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a4e      	ldr	r2, [pc, #312]	; (800154c <MX_GPIO_Init+0x190>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <MX_GPIO_Init+0x190>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b48      	ldr	r3, [pc, #288]	; (800154c <MX_GPIO_Init+0x190>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a47      	ldr	r2, [pc, #284]	; (800154c <MX_GPIO_Init+0x190>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <MX_GPIO_Init+0x190>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <MX_GPIO_Init+0x190>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a40      	ldr	r2, [pc, #256]	; (800154c <MX_GPIO_Init+0x190>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <MX_GPIO_Init+0x190>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <MX_GPIO_Init+0x190>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a39      	ldr	r2, [pc, #228]	; (800154c <MX_GPIO_Init+0x190>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <MX_GPIO_Init+0x190>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2120      	movs	r1, #32
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <MX_GPIO_Init+0x194>)
 8001480:	f001 fa9a 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2102      	movs	r1, #2
 8001488:	4832      	ldr	r0, [pc, #200]	; (8001554 <MX_GPIO_Init+0x198>)
 800148a:	f001 fa95 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001494:	4830      	ldr	r0, [pc, #192]	; (8001558 <MX_GPIO_Init+0x19c>)
 8001496:	f001 fa8f 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800149a:	2320      	movs	r3, #32
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4827      	ldr	r0, [pc, #156]	; (8001550 <MX_GPIO_Init+0x194>)
 80014b2:	f001 f8fd 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4821      	ldr	r0, [pc, #132]	; (8001554 <MX_GPIO_Init+0x198>)
 80014ce:	f001 f8ef 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80014d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	481b      	ldr	r0, [pc, #108]	; (8001558 <MX_GPIO_Init+0x19c>)
 80014ec:	f001 f8e0 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_SOL_Pin */
  GPIO_InitStruct.Pin = BTN_SOL_Pin;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_SOL_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_GPIO_Init+0x19c>)
 8001506:	f001 f8d3 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_SAG_Pin */
  GPIO_InitStruct.Pin = BTN_SAG_Pin;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_SAG_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_GPIO_Init+0x198>)
 8001520:	f001 f8c6 	bl	80026b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2006      	movs	r0, #6
 800152a:	f001 f868 	bl	80025fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800152e:	2006      	movs	r0, #6
 8001530:	f001 f881 	bl	8002636 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2017      	movs	r0, #23
 800153a:	f001 f860 	bl	80025fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800153e:	2017      	movs	r0, #23
 8001540:	f001 f879 	bl	8002636 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020400 	.word	0x40020400
 8001558:	40020c00 	.word	0x40020c00

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a6:	2007      	movs	r0, #7
 80015a8:	f001 f81e 	bl	80025e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_ADC_MspInit+0x7c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d127      	bne.n	800162a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_ADC_MspInit+0x80>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <HAL_ADC_MspInit+0x80>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_ADC_MspInit+0x80>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_ADC_MspInit+0x80>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_ADC_MspInit+0x80>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_ADC_MspInit+0x80>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001612:	2304      	movs	r3, #4
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_ADC_MspInit+0x84>)
 8001626:	f001 f843 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012000 	.word	0x40012000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020800 	.word	0x40020800

08001640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_SPI_MspInit+0x94>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d133      	bne.n	80016ca <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_SPI_MspInit+0x98>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_SPI_MspInit+0x98>)
 800166c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_SPI_MspInit+0x98>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_SPI_MspInit+0x98>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_SPI_MspInit+0x98>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_SPI_MspInit+0x98>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800169a:	23e0      	movs	r3, #224	; 0xe0
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016aa:	2305      	movs	r3, #5
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <HAL_SPI_MspInit+0x9c>)
 80016b6:	f000 fffb 	bl	80026b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2023      	movs	r0, #35	; 0x23
 80016c0:	f000 ff9d 	bl	80025fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016c4:	2023      	movs	r0, #35	; 0x23
 80016c6:	f000 ffb6 	bl	8002636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40013000 	.word	0x40013000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_TIM_Base_MspInit+0x8c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10e      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170e:	e026      	b.n	800175e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
}
 8001736:	e012      	b.n	800175e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_TIM_Base_MspInit+0x94>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10d      	bne.n	800175e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_TIM_Base_MspInit+0x90>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40010000 	.word	0x40010000
 8001770:	40023800 	.word	0x40023800
 8001774:	40000400 	.word	0x40000400

08001778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_TIM_MspPostInit+0xf8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11f      	bne.n	80017da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a34      	ldr	r2, [pc, #208]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 80017a4:	f043 0310 	orr.w	r3, r3, #16
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4829      	ldr	r0, [pc, #164]	; (8001878 <HAL_TIM_MspPostInit+0x100>)
 80017d4:	f000 ff6c 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017d8:	e046      	b.n	8001868 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e2:	d11e      	bne.n	8001822 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001800:	2301      	movs	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4818      	ldr	r0, [pc, #96]	; (800187c <HAL_TIM_MspPostInit+0x104>)
 800181c:	f000 ff48 	bl	80026b0 <HAL_GPIO_Init>
}
 8001820:	e022      	b.n	8001868 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_TIM_MspPostInit+0x108>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d11d      	bne.n	8001868 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_TIM_MspPostInit+0xfc>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001858:	2302      	movs	r3, #2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4808      	ldr	r0, [pc, #32]	; (8001884 <HAL_TIM_MspPostInit+0x10c>)
 8001864:	f000 ff24 	bl	80026b0 <HAL_GPIO_Init>
}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010000 	.word	0x40010000
 8001874:	40023800 	.word	0x40023800
 8001878:	40021000 	.word	0x40021000
 800187c:	40020000 	.word	0x40020000
 8001880:	40000400 	.word	0x40000400
 8001884:	40020800 	.word	0x40020800

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_UART_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e2:	230c      	movs	r3, #12
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x8c>)
 80018fe:	f000 fed7 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004400 	.word	0x40004400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f96e 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SOL_Pin);
 8001970:	2001      	movs	r0, #1
 8001972:	f001 f855 	bl	8002a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SAG_Pin);
 800197e:	2080      	movs	r0, #128	; 0x80
 8001980:	f001 f84e 	bl	8002a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <SPI1_IRQHandler+0x10>)
 800198e:	f002 f96f 	bl	8003c70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000e4 	.word	0x200000e4

0800199c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_kill>:

int _kill(int pid, int sig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019b6:	f003 fcd9 	bl	800536c <__errno>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2216      	movs	r2, #22
 80019be:	601a      	str	r2, [r3, #0]
  return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_exit>:

void _exit (int status)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffe7 	bl	80019ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80019de:	e7fe      	b.n	80019de <_exit+0x12>

080019e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e00a      	b.n	8001a08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f2:	f3af 8000 	nop.w
 80019f6:	4601      	mov	r1, r0
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	b2ca      	uxtb	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf0      	blt.n	80019f2 <_read+0x12>
  }

  return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e009      	b.n	8001a40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf1      	blt.n	8001a2c <_write+0x12>
  }
  return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_close>:

int _close(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_isatty>:

int _isatty(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f003 fc3e 	bl	800536c <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20020000 	.word	0x20020000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	200002bc 	.word	0x200002bc
 8001b24:	200002d8 	.word	0x200002d8

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff ffd7 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f003 fbfd 	bl	8005378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff f8a9 	bl	8000cd4 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b90:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 8001b94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b98:	200002d4 	.word	0x200002d4

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fd0d 	bl	80025e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fcc8 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd25 	bl	8002652 <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 fced 	bl	80025fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000000c 	.word	0x2000000c
 8001c3c:	20000014 	.word	0x20000014
 8001c40:	20000010 	.word	0x20000010

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000014 	.word	0x20000014
 8001c68:	200002c0 	.word	0x200002c0

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200002c0 	.word	0x200002c0

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000014 	.word	0x20000014

08001ccc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e033      	b.n	8001d4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fc64 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d12:	f023 0302 	bic.w	r3, r3, #2
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fa96 	bl	8002250 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Start+0x1a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e097      	b.n	8001e9e <HAL_ADC_Start+0x14a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d018      	beq.n	8001db6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d94:	4b45      	ldr	r3, [pc, #276]	; (8001eac <HAL_ADC_Start+0x158>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a45      	ldr	r2, [pc, #276]	; (8001eb0 <HAL_ADC_Start+0x15c>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9a      	lsrs	r2, r3, #18
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d15f      	bne.n	8001e84 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f023 0206 	bic.w	r2, r3, #6
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_ADC_Start+0x160>)
 8001e22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d129      	bne.n	8001e9c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e020      	b.n	8001e9c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_ADC_Start+0x164>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d11b      	bne.n	8001e9c <HAL_ADC_Start+0x148>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d114      	bne.n	8001e9c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	e00b      	b.n	8001e9c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f043 0210 	orr.w	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	431bde83 	.word	0x431bde83
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	40012000 	.word	0x40012000

08001ebc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d113      	bne.n	8001f02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	d10b      	bne.n	8001f02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f043 0220 	orr.w	r2, r3, #32
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e063      	b.n	8001fca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f02:	f7ff feb3 	bl	8001c6c <HAL_GetTick>
 8001f06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f08:	e021      	b.n	8001f4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d01d      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_ADC_PollForConversion+0x6c>
 8001f18:	f7ff fea8 	bl	8001c6c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d212      	bcs.n	8001f4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d00b      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0204 	orr.w	r2, r3, #4
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e03d      	b.n	8001fca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d1d6      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0212 	mvn.w	r2, #18
 8001f64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d123      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d11f      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1c>
 8002004:	2302      	movs	r3, #2
 8002006:	e113      	b.n	8002230 <HAL_ADC_ConfigChannel+0x244>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b09      	cmp	r3, #9
 8002016:	d925      	bls.n	8002064 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68d9      	ldr	r1, [r3, #12]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	3b1e      	subs	r3, #30
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43da      	mvns	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	400a      	ands	r2, r1
 800203c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68d9      	ldr	r1, [r3, #12]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	4618      	mov	r0, r3
 8002050:	4603      	mov	r3, r0
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4403      	add	r3, r0
 8002056:	3b1e      	subs	r3, #30
 8002058:	409a      	lsls	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	e022      	b.n	80020aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	2207      	movs	r2, #7
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6919      	ldr	r1, [r3, #16]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4618      	mov	r0, r3
 800209a:	4603      	mov	r3, r0
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4403      	add	r3, r0
 80020a0:	409a      	lsls	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d824      	bhi.n	80020fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b05      	subs	r3, #5
 80020c4:	221f      	movs	r2, #31
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b05      	subs	r3, #5
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34
 80020fa:	e04c      	b.n	8002196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d824      	bhi.n	800214e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b23      	subs	r3, #35	; 0x23
 8002116:	221f      	movs	r2, #31
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43da      	mvns	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	400a      	ands	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b23      	subs	r3, #35	; 0x23
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
 800214c:	e023      	b.n	8002196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3b41      	subs	r3, #65	; 0x41
 8002160:	221f      	movs	r2, #31
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	400a      	ands	r2, r1
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3b41      	subs	r3, #65	; 0x41
 800218a:	fa00 f203 	lsl.w	r2, r0, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002196:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_ADC_ConfigChannel+0x250>)
 8002198:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a28      	ldr	r2, [pc, #160]	; (8002240 <HAL_ADC_ConfigChannel+0x254>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d10f      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1d8>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b12      	cmp	r3, #18
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_ADC_ConfigChannel+0x254>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d12b      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x23a>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <HAL_ADC_ConfigChannel+0x258>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x1f4>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b11      	cmp	r3, #17
 80021de:	d122      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_ADC_ConfigChannel+0x258>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d111      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_ADC_ConfigChannel+0x25c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_ADC_ConfigChannel+0x260>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9a      	lsrs	r2, r3, #18
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002218:	e002      	b.n	8002220 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f9      	bne.n	800221a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012300 	.word	0x40012300
 8002240:	40012000 	.word	0x40012000
 8002244:	10000012 	.word	0x10000012
 8002248:	2000000c 	.word	0x2000000c
 800224c:	431bde83 	.word	0x431bde83

08002250 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <ADC_Init+0x1f0>)
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	431a      	orrs	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	021a      	lsls	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	4a58      	ldr	r2, [pc, #352]	; (8002444 <ADC_Init+0x1f4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d022      	beq.n	800232e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	e00f      	b.n	800234e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800233c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800234c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0202 	bic.w	r2, r2, #2
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7e1b      	ldrb	r3, [r3, #24]
 8002368:	005a      	lsls	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01b      	beq.n	80023b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800239a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	035a      	lsls	r2, r3, #13
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	e007      	b.n	80023c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	3b01      	subs	r3, #1
 80023e0:	051a      	lsls	r2, r3, #20
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002406:	025a      	lsls	r2, r3, #9
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6899      	ldr	r1, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	029a      	lsls	r2, r3, #10
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40012300 	.word	0x40012300
 8002444:	0f000001 	.word	0x0f000001

08002448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002464:	4013      	ands	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60d3      	str	r3, [r2, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 0307 	and.w	r3, r3, #7
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	db0b      	blt.n	80024d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <__NVIC_EnableIRQ+0x38>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2001      	movs	r0, #1
 80024ce:	fa00 f202 	lsl.w	r2, r0, r2
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000e100 	.word	0xe000e100

080024e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	db0a      	blt.n	8002512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	490c      	ldr	r1, [pc, #48]	; (8002534 <__NVIC_SetPriority+0x4c>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002510:	e00a      	b.n	8002528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4908      	ldr	r1, [pc, #32]	; (8002538 <__NVIC_SetPriority+0x50>)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3b04      	subs	r3, #4
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	440b      	add	r3, r1
 8002526:	761a      	strb	r2, [r3, #24]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000e100 	.word	0xe000e100
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f1c3 0307 	rsb	r3, r3, #7
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf28      	it	cs
 800255a:	2304      	movcs	r3, #4
 800255c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3304      	adds	r3, #4
 8002562:	2b06      	cmp	r3, #6
 8002564:	d902      	bls.n	800256c <NVIC_EncodePriority+0x30>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3b03      	subs	r3, #3
 800256a:	e000      	b.n	800256e <NVIC_EncodePriority+0x32>
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43d9      	mvns	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	4313      	orrs	r3, r2
         );
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b4:	d301      	bcc.n	80025ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00f      	b.n	80025da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <SysTick_Config+0x40>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c2:	210f      	movs	r1, #15
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f7ff ff8e 	bl	80024e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <SysTick_Config+0x40>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <SysTick_Config+0x40>)
 80025d4:	2207      	movs	r2, #7
 80025d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	e000e010 	.word	0xe000e010

080025e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff29 	bl	8002448 <__NVIC_SetPriorityGrouping>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002610:	f7ff ff3e 	bl	8002490 <__NVIC_GetPriorityGrouping>
 8002614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	6978      	ldr	r0, [r7, #20]
 800261c:	f7ff ff8e 	bl	800253c <NVIC_EncodePriority>
 8002620:	4602      	mov	r2, r0
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff5d 	bl	80024e8 <__NVIC_SetPriority>
}
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff31 	bl	80024ac <__NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ffa2 	bl	80025a4 <SysTick_Config>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e00c      	b.n	80026a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2205      	movs	r2, #5
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e159      	b.n	8002980 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8148 	bne.w	800297a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d005      	beq.n	8002702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d130      	bne.n	8002764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0201 	and.w	r2, r3, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d017      	beq.n	80027a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a2 	beq.w	800297a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b57      	ldr	r3, [pc, #348]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_GPIO_Init+0x2ec>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_GPIO_Init+0x2f0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x202>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_GPIO_Init+0x2f4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x1fe>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a47      	ldr	r2, [pc, #284]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x1fa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a46      	ldr	r2, [pc, #280]	; (80029ac <HAL_GPIO_Init+0x2fc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x1f6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a45      	ldr	r2, [pc, #276]	; (80029b0 <HAL_GPIO_Init+0x300>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x1f2>
 800289e:	2304      	movs	r3, #4
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_GPIO_Init+0x2ec>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <HAL_GPIO_Init+0x304>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <HAL_GPIO_Init+0x304>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_GPIO_Init+0x304>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_GPIO_Init+0x304>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f aea2 	bls.w	80026cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029fc:	887a      	ldrh	r2, [r7, #2]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	041a      	lsls	r2, r3, #16
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f82a 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8b0 	bl	8001c6c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f8ac 	bl	8001c6c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff f89c 	bl	8001c6c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7ff f898 	bl	8001c6c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7ff f851 	bl	8001c6c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7ff f84d 	bl	8001c6c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f830 	bl	8001c6c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7ff f82c 	bl	8001c6c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7ff f810 	bl	8001c6c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7ff f80c 	bl	8001c6c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fff9 	bl	8001c6c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fff5 	bl	8001c6c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe ffb5 	bl	8001c6c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe ffb1 	bl	8001c6c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe ff76 	bl	8001c6c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe ff72 	bl	8001c6c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe ff60 	bl	8001c6c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe ff5c 	bl	8001c6c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe ff30 	bl	8001c6c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe ff2c 	bl	8001c6c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ff05 	bl	8001c6c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe ff01 	bl	8001c6c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe feee 	bl	8001c6c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe feea 	bl	8001c6c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe fe1c 	bl	8001c6c <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fe18 	bl	8001c6c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fd7c 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	080065c0 	.word	0x080065c0
 8003104:	2000000c 	.word	0x2000000c
 8003108:	20000010 	.word	0x20000010

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b094      	sub	sp, #80	; 0x50
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	2300      	movs	r3, #0
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	2300      	movs	r3, #0
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80e1 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e0db      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003144:	e0db      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_GetSysClockFreq+0x208>)
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314a:	e0d8      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
 800316c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4621      	mov	r1, r4
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	6139      	str	r1, [r7, #16]
 800319c:	4629      	mov	r1, r5
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	ebb2 0801 	subs.w	r8, r2, r1
 80031c4:	4659      	mov	r1, fp
 80031c6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	462b      	mov	r3, r5
 80031ec:	eb49 0303 	adc.w	r3, r9, r3
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fe:	4629      	mov	r1, r5
 8003200:	024b      	lsls	r3, r1, #9
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003208:	4621      	mov	r1, r4
 800320a:	024a      	lsls	r2, r1, #9
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800321c:	f7fd f830 	bl	8000280 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	e058      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	4611      	mov	r1, r2
 8003236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003256:	0150      	lsls	r0, r2, #5
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4641      	mov	r1, r8
 800325e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb63 0b01 	sbc.w	fp, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327c:	ebb2 040a 	subs.w	r4, r2, sl
 8003280:	eb63 050b 	sbc.w	r5, r3, fp
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	464b      	mov	r3, r9
 80032a0:	eb45 0303 	adc.w	r3, r5, r3
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b2:	4629      	mov	r1, r5
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032bc:	4621      	mov	r1, r4
 80032be:	028a      	lsls	r2, r1, #10
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	61fa      	str	r2, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	f7fc ffd6 	bl	8000280 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003300:	4618      	mov	r0, r3
 8003302:	3750      	adds	r7, #80	; 0x50
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000000c 	.word	0x2000000c

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	080065d0 	.word	0x080065d0

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffdc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0b5b      	lsrs	r3, r3, #13
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	080065d0 	.word	0x080065d0

08003380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07b      	b.n	800348a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a2:	d009      	beq.n	80033b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
 80033aa:	e005      	b.n	80033b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe f934 	bl	8001640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	ea42 0103 	orr.w	r1, r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	f003 0104 	and.w	r1, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0210 	and.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_SPI_Transmit+0x22>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e126      	b.n	8003702 <HAL_SPI_Transmit+0x270>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034bc:	f7fe fbd6 	bl	8001c6c <HAL_GetTick>
 80034c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034d6:	e10b      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Transmit+0x52>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034e8:	e102      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d10f      	bne.n	8003552 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003550:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d007      	beq.n	8003570 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003578:	d14b      	bne.n	8003612 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_SPI_Transmit+0xf6>
 8003582:	8afb      	ldrh	r3, [r7, #22]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d13e      	bne.n	8003606 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035ac:	e02b      	b.n	8003606 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d112      	bne.n	80035e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
 80035e0:	e011      	b.n	8003606 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e2:	f7fe fb43 	bl	8001c6c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d803      	bhi.n	80035fa <HAL_SPI_Transmit+0x168>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Transmit+0x16e>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003604:	e074      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ce      	bne.n	80035ae <HAL_SPI_Transmit+0x11c>
 8003610:	e04c      	b.n	80036ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Transmit+0x18e>
 800361a:	8afb      	ldrh	r3, [r7, #22]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d140      	bne.n	80036a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003646:	e02c      	b.n	80036a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d113      	bne.n	800367e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36
 800367c:	e011      	b.n	80036a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367e:	f7fe faf5 	bl	8001c6c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d803      	bhi.n	8003696 <HAL_SPI_Transmit+0x204>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d102      	bne.n	800369c <HAL_SPI_Transmit+0x20a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036a0:	e026      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1cd      	bne.n	8003648 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fce9 	bl	8004088 <SPI_EndRxTxTransaction>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e000      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003700:	7ffb      	ldrb	r3, [r7, #31]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b088      	sub	sp, #32
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003726:	d112      	bne.n	800374e <HAL_SPI_Receive+0x44>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10e      	bne.n	800374e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2204      	movs	r2, #4
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f8f1 	bl	800392c <HAL_SPI_TransmitReceive>
 800374a:	4603      	mov	r3, r0
 800374c:	e0ea      	b.n	8003924 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_SPI_Receive+0x52>
 8003758:	2302      	movs	r3, #2
 800375a:	e0e3      	b.n	8003924 <HAL_SPI_Receive+0x21a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003764:	f7fe fa82 	bl	8001c6c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d002      	beq.n	800377c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	75fb      	strb	r3, [r7, #23]
    goto error;
 800377a:	e0ca      	b.n	8003912 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Receive+0x7e>
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800378c:	e0c1      	b.n	8003912 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2204      	movs	r2, #4
 8003792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d4:	d10f      	bne.n	80037f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d007      	beq.n	8003814 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d162      	bne.n	80038e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800381c:	e02e      	b.n	800387c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d115      	bne.n	8003858 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f103 020c 	add.w	r2, r3, #12
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003856:	e011      	b.n	800387c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003858:	f7fe fa08 	bl	8001c6c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d803      	bhi.n	8003870 <HAL_SPI_Receive+0x166>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d102      	bne.n	8003876 <HAL_SPI_Receive+0x16c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	75fb      	strb	r3, [r7, #23]
          goto error;
 800387a:	e04a      	b.n	8003912 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1cb      	bne.n	800381e <HAL_SPI_Receive+0x114>
 8003886:	e031      	b.n	80038ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d113      	bne.n	80038be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	b292      	uxth	r2, r2
 80038a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038bc:	e011      	b.n	80038e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038be:	f7fe f9d5 	bl	8001c6c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d803      	bhi.n	80038d6 <HAL_SPI_Receive+0x1cc>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Receive+0x1d2>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038e0:	e017      	b.n	8003912 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1cd      	bne.n	8003888 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fb63 	bl	8003fbc <SPI_EndRxTransaction>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
 800390e:	e000      	b.n	8003912 <HAL_SPI_Receive+0x208>
  }

error :
 8003910:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800393a:	2301      	movs	r3, #1
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x26>
 800394e:	2302      	movs	r3, #2
 8003950:	e18a      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x33c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800395a:	f7fe f987 	bl	8001c6c <HAL_GetTick>
 800395e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003978:	2b01      	cmp	r3, #1
 800397a:	d00f      	beq.n	800399c <HAL_SPI_TransmitReceive+0x70>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003982:	d107      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x68>
 800398c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003990:	2b04      	cmp	r3, #4
 8003992:	d003      	beq.n	800399c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003994:	2302      	movs	r3, #2
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800399a:	e15b      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x82>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x82>
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039b4:	e14e      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d003      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2205      	movs	r2, #5
 80039c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	887a      	ldrh	r2, [r7, #2]
 80039f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d007      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a26:	d178      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_SPI_TransmitReceive+0x10a>
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d166      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5a:	e053      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d11b      	bne.n	8003aa2 <HAL_SPI_TransmitReceive+0x176>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x176>
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d113      	bne.n	8003aa2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	881a      	ldrh	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	1c9a      	adds	r2, r3, #2
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d119      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x1b8>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	b292      	uxth	r2, r2
 8003ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ae4:	f7fe f8c2 	bl	8001c6c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d807      	bhi.n	8003b04 <HAL_SPI_TransmitReceive+0x1d8>
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d003      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b02:	e0a7      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1a6      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x130>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1a1      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x130>
 8003b18:	e07c      	b.n	8003c14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x1fc>
 8003b22:	8b7b      	ldrh	r3, [r7, #26]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d16b      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	7812      	ldrb	r2, [r2, #0]
 8003b34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4e:	e057      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d11c      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x26c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d017      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x26c>
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d114      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d119      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x2ae>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d014      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bda:	f7fe f847 	bl	8001c6c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d803      	bhi.n	8003bf2 <HAL_SPI_TransmitReceive+0x2c6>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d102      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x2cc>
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bfe:	e029      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1a2      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x224>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d19d      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fa35 	bl	8004088 <SPI_EndRxTxTransaction>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c30:	e010      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	e000      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3730      	adds	r7, #48	; 0x30
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
    return;
 8003cb2:	e0d7      	b.n	8003e64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_SPI_IRQHandler+0x66>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	09db      	lsrs	r3, r3, #7
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
    return;
 8003cd4:	e0c6      	b.n	8003e64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_SPI_IRQHandler+0x8c>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80b4 	beq.w	8003e64 <HAL_SPI_IRQHandler+0x1f4>
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80ad 	beq.w	8003e64 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d023      	beq.n	8003d5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d011      	beq.n	8003d46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0204 	orr.w	r2, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	e00b      	b.n	8003d5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	693b      	ldr	r3, [r7, #16]
        return;
 8003d5c:	e082      	b.n	8003e64 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0208 	orr.w	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04f      	beq.n	8003e62 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <HAL_SPI_IRQHandler+0x17e>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d034      	beq.n	8003e58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0203 	bic.w	r2, r2, #3
 8003dfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d011      	beq.n	8003e2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_SPI_IRQHandler+0x1fc>)
 8003e0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fc29 	bl	800266a <HAL_DMA_Abort_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <HAL_SPI_IRQHandler+0x1fc>)
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fc13 	bl	800266a <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e56:	e003      	b.n	8003e60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f809 	bl	8003e70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e5e:	e000      	b.n	8003e62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e60:	bf00      	nop
    return;
 8003e62:	bf00      	nop
  }
}
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	08003e85 	.word	0x08003e85

08003e70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ffe6 	bl	8003e70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ebc:	f7fd fed6 	bl	8001c6c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4413      	add	r3, r2
 8003eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ecc:	f7fd fece 	bl	8001c6c <HAL_GetTick>
 8003ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	015b      	lsls	r3, r3, #5
 8003ed8:	0d1b      	lsrs	r3, r3, #20
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	fb02 f303 	mul.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ee2:	e054      	b.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d050      	beq.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eec:	f7fd febe 	bl	8001c6c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d902      	bls.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d13d      	bne.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1a:	d111      	bne.n	8003f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	d004      	beq.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d107      	bne.n	8003f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f48:	d10f      	bne.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e017      	b.n	8003fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d19b      	bne.n	8003ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000000c 	.word	0x2000000c

08003fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd0:	d111      	bne.n	8003ff6 <SPI_EndRxTransaction+0x3a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fda:	d004      	beq.n	8003fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe4:	d107      	bne.n	8003ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffe:	d12a      	bne.n	8004056 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004008:	d012      	beq.n	8004030 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff ff49 	bl	8003eac <SPI_WaitFlagStateUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02d      	beq.n	800407c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e026      	b.n	800407e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	2101      	movs	r1, #1
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff ff36 	bl	8003eac <SPI_WaitFlagStateUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01a      	beq.n	800407c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e013      	b.n	800407e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	2101      	movs	r1, #1
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff ff23 	bl	8003eac <SPI_WaitFlagStateUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e000      	b.n	800407e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <SPI_EndRxTxTransaction+0x7c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <SPI_EndRxTxTransaction+0x80>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0d5b      	lsrs	r3, r3, #21
 80040a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b2:	d112      	bne.n	80040da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff fef4 	bl	8003eac <SPI_WaitFlagStateUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e00f      	b.n	80040fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d0f2      	beq.n	80040da <SPI_EndRxTxTransaction+0x52>
 80040f4:	e000      	b.n	80040f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80040f6:	bf00      	nop
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	2000000c 	.word	0x2000000c
 8004108:	165e9f81 	.word	0x165e9f81

0800410c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e041      	b.n	80041a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fd fad4 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f000 fac0 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e041      	b.n	8004240 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f839 	bl	8004248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 fa71 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_TIM_PWM_Start+0x24>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e022      	b.n	80042c6 <HAL_TIM_PWM_Start+0x6a>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d109      	bne.n	800429a <HAL_TIM_PWM_Start+0x3e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e015      	b.n	80042c6 <HAL_TIM_PWM_Start+0x6a>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d109      	bne.n	80042b4 <HAL_TIM_PWM_Start+0x58>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e008      	b.n	80042c6 <HAL_TIM_PWM_Start+0x6a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e068      	b.n	80043a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0x82>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	e013      	b.n	8004306 <HAL_TIM_PWM_Start+0xaa>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0x92>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ec:	e00b      	b.n	8004306 <HAL_TIM_PWM_Start+0xaa>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xa2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042fc:	e003      	b.n	8004306 <HAL_TIM_PWM_Start+0xaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fc84 	bl	8004c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <HAL_TIM_PWM_Start+0x14c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d107      	bne.n	800432e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <HAL_TIM_PWM_Start+0x14c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_TIM_PWM_Start+0x10e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d013      	beq.n	800436a <HAL_TIM_PWM_Start+0x10e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a19      	ldr	r2, [pc, #100]	; (80043ac <HAL_TIM_PWM_Start+0x150>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIM_PWM_Start+0x10e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_TIM_PWM_Start+0x154>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIM_PWM_Start+0x10e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_TIM_PWM_Start+0x158>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIM_PWM_Start+0x10e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <HAL_TIM_PWM_Start+0x15c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d111      	bne.n	800438e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b06      	cmp	r3, #6
 800437a:	d010      	beq.n	800439e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	e007      	b.n	800439e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40014000 	.word	0x40014000

080043bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0ae      	b.n	8004538 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	f200 809f 	bhi.w	8004528 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004425 	.word	0x08004425
 80043f4:	08004529 	.word	0x08004529
 80043f8:	08004529 	.word	0x08004529
 80043fc:	08004529 	.word	0x08004529
 8004400:	08004465 	.word	0x08004465
 8004404:	08004529 	.word	0x08004529
 8004408:	08004529 	.word	0x08004529
 800440c:	08004529 	.word	0x08004529
 8004410:	080044a7 	.word	0x080044a7
 8004414:	08004529 	.word	0x08004529
 8004418:	08004529 	.word	0x08004529
 800441c:	08004529 	.word	0x08004529
 8004420:	080044e7 	.word	0x080044e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f9d0 	bl	80047d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
      break;
 8004462:	e064      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fa16 	bl	800489c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	619a      	str	r2, [r3, #24]
      break;
 80044a4:	e043      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fa61 	bl	8004974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0208 	orr.w	r2, r2, #8
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0204 	bic.w	r2, r2, #4
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	61da      	str	r2, [r3, #28]
      break;
 80044e4:	e023      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 faab 	bl	8004a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69d9      	ldr	r1, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	021a      	lsls	r2, r3, #8
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	61da      	str	r2, [r3, #28]
      break;
 8004526:	e002      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
      break;
 800452c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIM_ConfigClockSource+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e0b4      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x186>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004594:	d03e      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0xd4>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	f200 8087 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	f000 8086 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x172>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d87f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d01a      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xa6>
 80045b0:	2b70      	cmp	r3, #112	; 0x70
 80045b2:	d87b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d050      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x11a>
 80045b8:	2b60      	cmp	r3, #96	; 0x60
 80045ba:	d877      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d03c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0xfa>
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d873      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d058      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x13a>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d86f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d064      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d86b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d060      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d867      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d05a      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	e062      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f000 faf1 	bl	8004bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	609a      	str	r2, [r3, #8]
      break;
 8004612:	e04f      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f000 fada 	bl	8004bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004636:	609a      	str	r2, [r3, #8]
      break;
 8004638:	e03c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fa4e 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2150      	movs	r1, #80	; 0x50
 8004652:	4618      	mov	r0, r3
 8004654:	f000 faa7 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004658:	e02c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fa6d 	bl	8004b46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2160      	movs	r1, #96	; 0x60
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fa97 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004678:	e01c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	461a      	mov	r2, r3
 8004688:	f000 fa2e 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa87 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fa7e 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a34      	ldr	r2, [pc, #208]	; (80047b4 <TIM_Base_SetConfig+0xe4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00f      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <TIM_Base_SetConfig+0xe8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a30      	ldr	r2, [pc, #192]	; (80047bc <TIM_Base_SetConfig+0xec>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a2f      	ldr	r2, [pc, #188]	; (80047c0 <TIM_Base_SetConfig+0xf0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <TIM_Base_SetConfig+0xe4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01b      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d017      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <TIM_Base_SetConfig+0xe8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a21      	ldr	r2, [pc, #132]	; (80047bc <TIM_Base_SetConfig+0xec>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <TIM_Base_SetConfig+0xf0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <TIM_Base_SetConfig+0xf4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <TIM_Base_SetConfig+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <TIM_Base_SetConfig+0xfc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <TIM_Base_SetConfig+0xe4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	615a      	str	r2, [r3, #20]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800

080047d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f023 0302 	bic.w	r3, r3, #2
 8004818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <TIM_OC1_SetConfig+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d10c      	bne.n	8004846 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0308 	bic.w	r3, r3, #8
 8004832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 0304 	bic.w	r3, r3, #4
 8004844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <TIM_OC1_SetConfig+0xc8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d111      	bne.n	8004872 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40010000 	.word	0x40010000

0800489c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0210 	bic.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0320 	bic.w	r3, r3, #32
 80048e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <TIM_OC2_SetConfig+0xd4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10d      	bne.n	8004918 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <TIM_OC2_SetConfig+0xd4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d113      	bne.n	8004948 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000

08004974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <TIM_OC3_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10d      	bne.n	80049ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <TIM_OC3_SetConfig+0xd0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d113      	bne.n	8004a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40010000 	.word	0x40010000

08004a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <TIM_OC4_SetConfig+0x9c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d109      	bne.n	8004abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000

08004ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 030a 	bic.w	r3, r3, #10
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0210 	bic.w	r2, r3, #16
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	031b      	lsls	r3, r3, #12
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f043 0307 	orr.w	r3, r3, #7
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2201      	movs	r2, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	fa01 f303 	lsl.w	r3, r1, r3
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e050      	b.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d013      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10c      	bne.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40014000 	.word	0x40014000

08004d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e03d      	b.n	8004ddc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e03f      	b.n	8004e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fc fd3a 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f829 	bl	8004e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b0c0      	sub	sp, #256	; 0x100
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	68d9      	ldr	r1, [r3, #12]
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	ea40 0301 	orr.w	r3, r0, r1
 8004eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004edc:	f021 010c 	bic.w	r1, r1, #12
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eea:	430b      	orrs	r3, r1
 8004eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efe:	6999      	ldr	r1, [r3, #24]
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	ea40 0301 	orr.w	r3, r0, r1
 8004f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b8f      	ldr	r3, [pc, #572]	; (8005150 <UART_SetConfig+0x2cc>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d005      	beq.n	8004f24 <UART_SetConfig+0xa0>
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	; (8005154 <UART_SetConfig+0x2d0>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d104      	bne.n	8004f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fe fa18 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004f28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f2c:	e003      	b.n	8004f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f2e:	f7fe f9ff 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004f32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	f040 810c 	bne.w	800515c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f56:	4622      	mov	r2, r4
 8004f58:	462b      	mov	r3, r5
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f66:	4621      	mov	r1, r4
 8004f68:	eb12 0801 	adds.w	r8, r2, r1
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	eb43 0901 	adc.w	r9, r3, r1
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f86:	4690      	mov	r8, r2
 8004f88:	4699      	mov	r9, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	eb18 0303 	adds.w	r3, r8, r3
 8004f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f94:	462b      	mov	r3, r5
 8004f96:	eb49 0303 	adc.w	r3, r9, r3
 8004f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004faa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	18db      	adds	r3, r3, r3
 8004fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fb8:	4613      	mov	r3, r2
 8004fba:	eb42 0303 	adc.w	r3, r2, r3
 8004fbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fc8:	f7fb f95a 	bl	8000280 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4b61      	ldr	r3, [pc, #388]	; (8005158 <UART_SetConfig+0x2d4>)
 8004fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	011c      	lsls	r4, r3, #4
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8005002:	4649      	mov	r1, r9
 8005004:	eb43 0b01 	adc.w	fp, r3, r1
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800501c:	4692      	mov	sl, r2
 800501e:	469b      	mov	fp, r3
 8005020:	4643      	mov	r3, r8
 8005022:	eb1a 0303 	adds.w	r3, sl, r3
 8005026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800502a:	464b      	mov	r3, r9
 800502c:	eb4b 0303 	adc.w	r3, fp, r3
 8005030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005040:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005048:	460b      	mov	r3, r1
 800504a:	18db      	adds	r3, r3, r3
 800504c:	643b      	str	r3, [r7, #64]	; 0x40
 800504e:	4613      	mov	r3, r2
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
 8005056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800505a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800505e:	f7fb f90f 	bl	8000280 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4611      	mov	r1, r2
 8005068:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <UART_SetConfig+0x2d4>)
 800506a:	fba3 2301 	umull	r2, r3, r3, r1
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2264      	movs	r2, #100	; 0x64
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	1acb      	subs	r3, r1, r3
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800507e:	4b36      	ldr	r3, [pc, #216]	; (8005158 <UART_SetConfig+0x2d4>)
 8005080:	fba3 2302 	umull	r2, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800508c:	441c      	add	r4, r3
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005098:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800509c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80050a8:	415b      	adcs	r3, r3
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6339      	str	r1, [r7, #48]	; 0x30
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	637b      	str	r3, [r7, #52]	; 0x34
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005104:	460b      	mov	r3, r1
 8005106:	18db      	adds	r3, r3, r3
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
 800510a:	4613      	mov	r3, r2
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800511a:	f7fb f8b1 	bl	8000280 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <UART_SetConfig+0x2d4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	; 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3332      	adds	r3, #50	; 0x32
 8005136:	4a08      	ldr	r2, [pc, #32]	; (8005158 <UART_SetConfig+0x2d4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 0207 	and.w	r2, r3, #7
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4422      	add	r2, r4
 800514a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800514c:	e105      	b.n	800535a <UART_SetConfig+0x4d6>
 800514e:	bf00      	nop
 8005150:	40011000 	.word	0x40011000
 8005154:	40011400 	.word	0x40011400
 8005158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800515c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005166:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800516a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800516e:	4642      	mov	r2, r8
 8005170:	464b      	mov	r3, r9
 8005172:	1891      	adds	r1, r2, r2
 8005174:	6239      	str	r1, [r7, #32]
 8005176:	415b      	adcs	r3, r3
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
 800517a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517e:	4641      	mov	r1, r8
 8005180:	1854      	adds	r4, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb43 0501 	adc.w	r5, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	00eb      	lsls	r3, r5, #3
 8005192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005196:	00e2      	lsls	r2, r4, #3
 8005198:	4614      	mov	r4, r2
 800519a:	461d      	mov	r5, r3
 800519c:	4643      	mov	r3, r8
 800519e:	18e3      	adds	r3, r4, r3
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051a4:	464b      	mov	r3, r9
 80051a6:	eb45 0303 	adc.w	r3, r5, r3
 80051aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ca:	4629      	mov	r1, r5
 80051cc:	008b      	lsls	r3, r1, #2
 80051ce:	4621      	mov	r1, r4
 80051d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d4:	4621      	mov	r1, r4
 80051d6:	008a      	lsls	r2, r1, #2
 80051d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051dc:	f7fb f850 	bl	8000280 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4b60      	ldr	r3, [pc, #384]	; (8005368 <UART_SetConfig+0x4e4>)
 80051e6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	011c      	lsls	r4, r3, #4
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	61b9      	str	r1, [r7, #24]
 8005208:	415b      	adcs	r3, r3
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6139      	str	r1, [r7, #16]
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	67bb      	str	r3, [r7, #120]	; 0x78
 800525a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005268:	4649      	mov	r1, r9
 800526a:	008b      	lsls	r3, r1, #2
 800526c:	4641      	mov	r1, r8
 800526e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005272:	4641      	mov	r1, r8
 8005274:	008a      	lsls	r2, r1, #2
 8005276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800527a:	f7fb f801 	bl	8000280 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4b39      	ldr	r3, [pc, #228]	; (8005368 <UART_SetConfig+0x4e4>)
 8005284:	fba3 1302 	umull	r1, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	2164      	movs	r1, #100	; 0x64
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	3332      	adds	r3, #50	; 0x32
 8005296:	4a34      	ldr	r2, [pc, #208]	; (8005368 <UART_SetConfig+0x4e4>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a2:	441c      	add	r4, r3
 80052a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a8:	2200      	movs	r2, #0
 80052aa:	673b      	str	r3, [r7, #112]	; 0x70
 80052ac:	677a      	str	r2, [r7, #116]	; 0x74
 80052ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052b2:	4642      	mov	r2, r8
 80052b4:	464b      	mov	r3, r9
 80052b6:	1891      	adds	r1, r2, r2
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	415b      	adcs	r3, r3
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c2:	4641      	mov	r1, r8
 80052c4:	1851      	adds	r1, r2, r1
 80052c6:	6039      	str	r1, [r7, #0]
 80052c8:	4649      	mov	r1, r9
 80052ca:	414b      	adcs	r3, r1
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052da:	4659      	mov	r1, fp
 80052dc:	00cb      	lsls	r3, r1, #3
 80052de:	4651      	mov	r1, sl
 80052e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e4:	4651      	mov	r1, sl
 80052e6:	00ca      	lsls	r2, r1, #3
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	4603      	mov	r3, r0
 80052ee:	4642      	mov	r2, r8
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f4:	464b      	mov	r3, r9
 80052f6:	460a      	mov	r2, r1
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	663b      	str	r3, [r7, #96]	; 0x60
 8005308:	667a      	str	r2, [r7, #100]	; 0x64
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005316:	4649      	mov	r1, r9
 8005318:	008b      	lsls	r3, r1, #2
 800531a:	4641      	mov	r1, r8
 800531c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005320:	4641      	mov	r1, r8
 8005322:	008a      	lsls	r2, r1, #2
 8005324:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005328:	f7fa ffaa 	bl	8000280 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <UART_SetConfig+0x4e4>)
 8005332:	fba3 1302 	umull	r1, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	3332      	adds	r3, #50	; 0x32
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <UART_SetConfig+0x4e4>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4422      	add	r2, r4
 8005358:	609a      	str	r2, [r3, #8]
}
 800535a:	bf00      	nop
 800535c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005360:	46bd      	mov	sp, r7
 8005362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005366:	bf00      	nop
 8005368:	51eb851f 	.word	0x51eb851f

0800536c <__errno>:
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <__errno+0x8>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000018 	.word	0x20000018

08005378 <__libc_init_array>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4d0d      	ldr	r5, [pc, #52]	; (80053b0 <__libc_init_array+0x38>)
 800537c:	4c0d      	ldr	r4, [pc, #52]	; (80053b4 <__libc_init_array+0x3c>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	2600      	movs	r6, #0
 8005384:	42a6      	cmp	r6, r4
 8005386:	d109      	bne.n	800539c <__libc_init_array+0x24>
 8005388:	4d0b      	ldr	r5, [pc, #44]	; (80053b8 <__libc_init_array+0x40>)
 800538a:	4c0c      	ldr	r4, [pc, #48]	; (80053bc <__libc_init_array+0x44>)
 800538c:	f001 f902 	bl	8006594 <_init>
 8005390:	1b64      	subs	r4, r4, r5
 8005392:	10a4      	asrs	r4, r4, #2
 8005394:	2600      	movs	r6, #0
 8005396:	42a6      	cmp	r6, r4
 8005398:	d105      	bne.n	80053a6 <__libc_init_array+0x2e>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a0:	4798      	blx	r3
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7ee      	b.n	8005384 <__libc_init_array+0xc>
 80053a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053aa:	4798      	blx	r3
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7f2      	b.n	8005396 <__libc_init_array+0x1e>
 80053b0:	08006828 	.word	0x08006828
 80053b4:	08006828 	.word	0x08006828
 80053b8:	08006828 	.word	0x08006828
 80053bc:	0800682c 	.word	0x0800682c

080053c0 <memset>:
 80053c0:	4402      	add	r2, r0
 80053c2:	4603      	mov	r3, r0
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d100      	bne.n	80053ca <memset+0xa>
 80053c8:	4770      	bx	lr
 80053ca:	f803 1b01 	strb.w	r1, [r3], #1
 80053ce:	e7f9      	b.n	80053c4 <memset+0x4>

080053d0 <strtok>:
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <strtok+0x5c>)
 80053d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053d4:	681e      	ldr	r6, [r3, #0]
 80053d6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80053d8:	4605      	mov	r5, r0
 80053da:	b9fc      	cbnz	r4, 800541c <strtok+0x4c>
 80053dc:	2050      	movs	r0, #80	; 0x50
 80053de:	9101      	str	r1, [sp, #4]
 80053e0:	f000 f90e 	bl	8005600 <malloc>
 80053e4:	9901      	ldr	r1, [sp, #4]
 80053e6:	65b0      	str	r0, [r6, #88]	; 0x58
 80053e8:	4602      	mov	r2, r0
 80053ea:	b920      	cbnz	r0, 80053f6 <strtok+0x26>
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <strtok+0x60>)
 80053ee:	4811      	ldr	r0, [pc, #68]	; (8005434 <strtok+0x64>)
 80053f0:	2157      	movs	r1, #87	; 0x57
 80053f2:	f000 f8d5 	bl	80055a0 <__assert_func>
 80053f6:	e9c0 4400 	strd	r4, r4, [r0]
 80053fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80053fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005402:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005406:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800540a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800540e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005412:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005416:	6184      	str	r4, [r0, #24]
 8005418:	7704      	strb	r4, [r0, #28]
 800541a:	6244      	str	r4, [r0, #36]	; 0x24
 800541c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800541e:	2301      	movs	r3, #1
 8005420:	4628      	mov	r0, r5
 8005422:	b002      	add	sp, #8
 8005424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005428:	f000 b806 	b.w	8005438 <__strtok_r>
 800542c:	20000018 	.word	0x20000018
 8005430:	080065dc 	.word	0x080065dc
 8005434:	080065f3 	.word	0x080065f3

08005438 <__strtok_r>:
 8005438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800543a:	b908      	cbnz	r0, 8005440 <__strtok_r+0x8>
 800543c:	6810      	ldr	r0, [r2, #0]
 800543e:	b188      	cbz	r0, 8005464 <__strtok_r+0x2c>
 8005440:	4604      	mov	r4, r0
 8005442:	4620      	mov	r0, r4
 8005444:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005448:	460f      	mov	r7, r1
 800544a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800544e:	b91e      	cbnz	r6, 8005458 <__strtok_r+0x20>
 8005450:	b965      	cbnz	r5, 800546c <__strtok_r+0x34>
 8005452:	6015      	str	r5, [r2, #0]
 8005454:	4628      	mov	r0, r5
 8005456:	e005      	b.n	8005464 <__strtok_r+0x2c>
 8005458:	42b5      	cmp	r5, r6
 800545a:	d1f6      	bne.n	800544a <__strtok_r+0x12>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <__strtok_r+0xa>
 8005460:	6014      	str	r4, [r2, #0]
 8005462:	7003      	strb	r3, [r0, #0]
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005466:	461c      	mov	r4, r3
 8005468:	e00c      	b.n	8005484 <__strtok_r+0x4c>
 800546a:	b915      	cbnz	r5, 8005472 <__strtok_r+0x3a>
 800546c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005470:	460e      	mov	r6, r1
 8005472:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005476:	42ab      	cmp	r3, r5
 8005478:	d1f7      	bne.n	800546a <__strtok_r+0x32>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f3      	beq.n	8005466 <__strtok_r+0x2e>
 800547e:	2300      	movs	r3, #0
 8005480:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005484:	6014      	str	r4, [r2, #0]
 8005486:	e7ed      	b.n	8005464 <__strtok_r+0x2c>

08005488 <_strtol_l.constprop.0>:
 8005488:	2b01      	cmp	r3, #1
 800548a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548e:	d001      	beq.n	8005494 <_strtol_l.constprop.0+0xc>
 8005490:	2b24      	cmp	r3, #36	; 0x24
 8005492:	d906      	bls.n	80054a2 <_strtol_l.constprop.0+0x1a>
 8005494:	f7ff ff6a 	bl	800536c <__errno>
 8005498:	2316      	movs	r3, #22
 800549a:	6003      	str	r3, [r0, #0]
 800549c:	2000      	movs	r0, #0
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005588 <_strtol_l.constprop.0+0x100>
 80054a6:	460d      	mov	r5, r1
 80054a8:	462e      	mov	r6, r5
 80054aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80054b2:	f017 0708 	ands.w	r7, r7, #8
 80054b6:	d1f7      	bne.n	80054a8 <_strtol_l.constprop.0+0x20>
 80054b8:	2c2d      	cmp	r4, #45	; 0x2d
 80054ba:	d132      	bne.n	8005522 <_strtol_l.constprop.0+0x9a>
 80054bc:	782c      	ldrb	r4, [r5, #0]
 80054be:	2701      	movs	r7, #1
 80054c0:	1cb5      	adds	r5, r6, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d05b      	beq.n	800557e <_strtol_l.constprop.0+0xf6>
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d109      	bne.n	80054de <_strtol_l.constprop.0+0x56>
 80054ca:	2c30      	cmp	r4, #48	; 0x30
 80054cc:	d107      	bne.n	80054de <_strtol_l.constprop.0+0x56>
 80054ce:	782c      	ldrb	r4, [r5, #0]
 80054d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80054d4:	2c58      	cmp	r4, #88	; 0x58
 80054d6:	d14d      	bne.n	8005574 <_strtol_l.constprop.0+0xec>
 80054d8:	786c      	ldrb	r4, [r5, #1]
 80054da:	2310      	movs	r3, #16
 80054dc:	3502      	adds	r5, #2
 80054de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80054e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80054e6:	f04f 0c00 	mov.w	ip, #0
 80054ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80054ee:	4666      	mov	r6, ip
 80054f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80054f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80054f8:	f1be 0f09 	cmp.w	lr, #9
 80054fc:	d816      	bhi.n	800552c <_strtol_l.constprop.0+0xa4>
 80054fe:	4674      	mov	r4, lr
 8005500:	42a3      	cmp	r3, r4
 8005502:	dd24      	ble.n	800554e <_strtol_l.constprop.0+0xc6>
 8005504:	f1bc 0f00 	cmp.w	ip, #0
 8005508:	db1e      	blt.n	8005548 <_strtol_l.constprop.0+0xc0>
 800550a:	45b1      	cmp	r9, r6
 800550c:	d31c      	bcc.n	8005548 <_strtol_l.constprop.0+0xc0>
 800550e:	d101      	bne.n	8005514 <_strtol_l.constprop.0+0x8c>
 8005510:	45a2      	cmp	sl, r4
 8005512:	db19      	blt.n	8005548 <_strtol_l.constprop.0+0xc0>
 8005514:	fb06 4603 	mla	r6, r6, r3, r4
 8005518:	f04f 0c01 	mov.w	ip, #1
 800551c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005520:	e7e8      	b.n	80054f4 <_strtol_l.constprop.0+0x6c>
 8005522:	2c2b      	cmp	r4, #43	; 0x2b
 8005524:	bf04      	itt	eq
 8005526:	782c      	ldrbeq	r4, [r5, #0]
 8005528:	1cb5      	addeq	r5, r6, #2
 800552a:	e7ca      	b.n	80054c2 <_strtol_l.constprop.0+0x3a>
 800552c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005530:	f1be 0f19 	cmp.w	lr, #25
 8005534:	d801      	bhi.n	800553a <_strtol_l.constprop.0+0xb2>
 8005536:	3c37      	subs	r4, #55	; 0x37
 8005538:	e7e2      	b.n	8005500 <_strtol_l.constprop.0+0x78>
 800553a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800553e:	f1be 0f19 	cmp.w	lr, #25
 8005542:	d804      	bhi.n	800554e <_strtol_l.constprop.0+0xc6>
 8005544:	3c57      	subs	r4, #87	; 0x57
 8005546:	e7db      	b.n	8005500 <_strtol_l.constprop.0+0x78>
 8005548:	f04f 3cff 	mov.w	ip, #4294967295
 800554c:	e7e6      	b.n	800551c <_strtol_l.constprop.0+0x94>
 800554e:	f1bc 0f00 	cmp.w	ip, #0
 8005552:	da05      	bge.n	8005560 <_strtol_l.constprop.0+0xd8>
 8005554:	2322      	movs	r3, #34	; 0x22
 8005556:	6003      	str	r3, [r0, #0]
 8005558:	4646      	mov	r6, r8
 800555a:	b942      	cbnz	r2, 800556e <_strtol_l.constprop.0+0xe6>
 800555c:	4630      	mov	r0, r6
 800555e:	e79e      	b.n	800549e <_strtol_l.constprop.0+0x16>
 8005560:	b107      	cbz	r7, 8005564 <_strtol_l.constprop.0+0xdc>
 8005562:	4276      	negs	r6, r6
 8005564:	2a00      	cmp	r2, #0
 8005566:	d0f9      	beq.n	800555c <_strtol_l.constprop.0+0xd4>
 8005568:	f1bc 0f00 	cmp.w	ip, #0
 800556c:	d000      	beq.n	8005570 <_strtol_l.constprop.0+0xe8>
 800556e:	1e69      	subs	r1, r5, #1
 8005570:	6011      	str	r1, [r2, #0]
 8005572:	e7f3      	b.n	800555c <_strtol_l.constprop.0+0xd4>
 8005574:	2430      	movs	r4, #48	; 0x30
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1b1      	bne.n	80054de <_strtol_l.constprop.0+0x56>
 800557a:	2308      	movs	r3, #8
 800557c:	e7af      	b.n	80054de <_strtol_l.constprop.0+0x56>
 800557e:	2c30      	cmp	r4, #48	; 0x30
 8005580:	d0a5      	beq.n	80054ce <_strtol_l.constprop.0+0x46>
 8005582:	230a      	movs	r3, #10
 8005584:	e7ab      	b.n	80054de <_strtol_l.constprop.0+0x56>
 8005586:	bf00      	nop
 8005588:	0800668d 	.word	0x0800668d

0800558c <strtol>:
 800558c:	4613      	mov	r3, r2
 800558e:	460a      	mov	r2, r1
 8005590:	4601      	mov	r1, r0
 8005592:	4802      	ldr	r0, [pc, #8]	; (800559c <strtol+0x10>)
 8005594:	6800      	ldr	r0, [r0, #0]
 8005596:	f7ff bf77 	b.w	8005488 <_strtol_l.constprop.0>
 800559a:	bf00      	nop
 800559c:	20000018 	.word	0x20000018

080055a0 <__assert_func>:
 80055a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055a2:	4614      	mov	r4, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <__assert_func+0x2c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4605      	mov	r5, r0
 80055ac:	68d8      	ldr	r0, [r3, #12]
 80055ae:	b14c      	cbz	r4, 80055c4 <__assert_func+0x24>
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <__assert_func+0x30>)
 80055b2:	9100      	str	r1, [sp, #0]
 80055b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055b8:	4906      	ldr	r1, [pc, #24]	; (80055d4 <__assert_func+0x34>)
 80055ba:	462b      	mov	r3, r5
 80055bc:	f000 f80e 	bl	80055dc <fiprintf>
 80055c0:	f000 fcc4 	bl	8005f4c <abort>
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <__assert_func+0x38>)
 80055c6:	461c      	mov	r4, r3
 80055c8:	e7f3      	b.n	80055b2 <__assert_func+0x12>
 80055ca:	bf00      	nop
 80055cc:	20000018 	.word	0x20000018
 80055d0:	08006650 	.word	0x08006650
 80055d4:	0800665d 	.word	0x0800665d
 80055d8:	0800668b 	.word	0x0800668b

080055dc <fiprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	b503      	push	{r0, r1, lr}
 80055e0:	4601      	mov	r1, r0
 80055e2:	ab03      	add	r3, sp, #12
 80055e4:	4805      	ldr	r0, [pc, #20]	; (80055fc <fiprintf+0x20>)
 80055e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	f000 f919 	bl	8005824 <_vfiprintf_r>
 80055f2:	b002      	add	sp, #8
 80055f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f8:	b003      	add	sp, #12
 80055fa:	4770      	bx	lr
 80055fc:	20000018 	.word	0x20000018

08005600 <malloc>:
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <malloc+0xc>)
 8005602:	4601      	mov	r1, r0
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f000 b86f 	b.w	80056e8 <_malloc_r>
 800560a:	bf00      	nop
 800560c:	20000018 	.word	0x20000018

08005610 <_free_r>:
 8005610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005612:	2900      	cmp	r1, #0
 8005614:	d044      	beq.n	80056a0 <_free_r+0x90>
 8005616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561a:	9001      	str	r0, [sp, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f1a1 0404 	sub.w	r4, r1, #4
 8005622:	bfb8      	it	lt
 8005624:	18e4      	addlt	r4, r4, r3
 8005626:	f000 feb9 	bl	800639c <__malloc_lock>
 800562a:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <_free_r+0x94>)
 800562c:	9801      	ldr	r0, [sp, #4]
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	b933      	cbnz	r3, 8005640 <_free_r+0x30>
 8005632:	6063      	str	r3, [r4, #4]
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	b003      	add	sp, #12
 8005638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800563c:	f000 beb4 	b.w	80063a8 <__malloc_unlock>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d908      	bls.n	8005656 <_free_r+0x46>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	1961      	adds	r1, r4, r5
 8005648:	428b      	cmp	r3, r1
 800564a:	bf01      	itttt	eq
 800564c:	6819      	ldreq	r1, [r3, #0]
 800564e:	685b      	ldreq	r3, [r3, #4]
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	e7ed      	b.n	8005632 <_free_r+0x22>
 8005656:	461a      	mov	r2, r3
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	b10b      	cbz	r3, 8005660 <_free_r+0x50>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d9fa      	bls.n	8005656 <_free_r+0x46>
 8005660:	6811      	ldr	r1, [r2, #0]
 8005662:	1855      	adds	r5, r2, r1
 8005664:	42a5      	cmp	r5, r4
 8005666:	d10b      	bne.n	8005680 <_free_r+0x70>
 8005668:	6824      	ldr	r4, [r4, #0]
 800566a:	4421      	add	r1, r4
 800566c:	1854      	adds	r4, r2, r1
 800566e:	42a3      	cmp	r3, r4
 8005670:	6011      	str	r1, [r2, #0]
 8005672:	d1e0      	bne.n	8005636 <_free_r+0x26>
 8005674:	681c      	ldr	r4, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	6053      	str	r3, [r2, #4]
 800567a:	4421      	add	r1, r4
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	e7da      	b.n	8005636 <_free_r+0x26>
 8005680:	d902      	bls.n	8005688 <_free_r+0x78>
 8005682:	230c      	movs	r3, #12
 8005684:	6003      	str	r3, [r0, #0]
 8005686:	e7d6      	b.n	8005636 <_free_r+0x26>
 8005688:	6825      	ldr	r5, [r4, #0]
 800568a:	1961      	adds	r1, r4, r5
 800568c:	428b      	cmp	r3, r1
 800568e:	bf04      	itt	eq
 8005690:	6819      	ldreq	r1, [r3, #0]
 8005692:	685b      	ldreq	r3, [r3, #4]
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	bf04      	itt	eq
 8005698:	1949      	addeq	r1, r1, r5
 800569a:	6021      	streq	r1, [r4, #0]
 800569c:	6054      	str	r4, [r2, #4]
 800569e:	e7ca      	b.n	8005636 <_free_r+0x26>
 80056a0:	b003      	add	sp, #12
 80056a2:	bd30      	pop	{r4, r5, pc}
 80056a4:	200002c4 	.word	0x200002c4

080056a8 <sbrk_aligned>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4e0e      	ldr	r6, [pc, #56]	; (80056e4 <sbrk_aligned+0x3c>)
 80056ac:	460c      	mov	r4, r1
 80056ae:	6831      	ldr	r1, [r6, #0]
 80056b0:	4605      	mov	r5, r0
 80056b2:	b911      	cbnz	r1, 80056ba <sbrk_aligned+0x12>
 80056b4:	f000 fb7a 	bl	8005dac <_sbrk_r>
 80056b8:	6030      	str	r0, [r6, #0]
 80056ba:	4621      	mov	r1, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 fb75 	bl	8005dac <_sbrk_r>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d00a      	beq.n	80056dc <sbrk_aligned+0x34>
 80056c6:	1cc4      	adds	r4, r0, #3
 80056c8:	f024 0403 	bic.w	r4, r4, #3
 80056cc:	42a0      	cmp	r0, r4
 80056ce:	d007      	beq.n	80056e0 <sbrk_aligned+0x38>
 80056d0:	1a21      	subs	r1, r4, r0
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 fb6a 	bl	8005dac <_sbrk_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	d101      	bne.n	80056e0 <sbrk_aligned+0x38>
 80056dc:	f04f 34ff 	mov.w	r4, #4294967295
 80056e0:	4620      	mov	r0, r4
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	200002c8 	.word	0x200002c8

080056e8 <_malloc_r>:
 80056e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ec:	1ccd      	adds	r5, r1, #3
 80056ee:	f025 0503 	bic.w	r5, r5, #3
 80056f2:	3508      	adds	r5, #8
 80056f4:	2d0c      	cmp	r5, #12
 80056f6:	bf38      	it	cc
 80056f8:	250c      	movcc	r5, #12
 80056fa:	2d00      	cmp	r5, #0
 80056fc:	4607      	mov	r7, r0
 80056fe:	db01      	blt.n	8005704 <_malloc_r+0x1c>
 8005700:	42a9      	cmp	r1, r5
 8005702:	d905      	bls.n	8005710 <_malloc_r+0x28>
 8005704:	230c      	movs	r3, #12
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	2600      	movs	r6, #0
 800570a:	4630      	mov	r0, r6
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	4e2e      	ldr	r6, [pc, #184]	; (80057cc <_malloc_r+0xe4>)
 8005712:	f000 fe43 	bl	800639c <__malloc_lock>
 8005716:	6833      	ldr	r3, [r6, #0]
 8005718:	461c      	mov	r4, r3
 800571a:	bb34      	cbnz	r4, 800576a <_malloc_r+0x82>
 800571c:	4629      	mov	r1, r5
 800571e:	4638      	mov	r0, r7
 8005720:	f7ff ffc2 	bl	80056a8 <sbrk_aligned>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	4604      	mov	r4, r0
 8005728:	d14d      	bne.n	80057c6 <_malloc_r+0xde>
 800572a:	6834      	ldr	r4, [r6, #0]
 800572c:	4626      	mov	r6, r4
 800572e:	2e00      	cmp	r6, #0
 8005730:	d140      	bne.n	80057b4 <_malloc_r+0xcc>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	4631      	mov	r1, r6
 8005736:	4638      	mov	r0, r7
 8005738:	eb04 0803 	add.w	r8, r4, r3
 800573c:	f000 fb36 	bl	8005dac <_sbrk_r>
 8005740:	4580      	cmp	r8, r0
 8005742:	d13a      	bne.n	80057ba <_malloc_r+0xd2>
 8005744:	6821      	ldr	r1, [r4, #0]
 8005746:	3503      	adds	r5, #3
 8005748:	1a6d      	subs	r5, r5, r1
 800574a:	f025 0503 	bic.w	r5, r5, #3
 800574e:	3508      	adds	r5, #8
 8005750:	2d0c      	cmp	r5, #12
 8005752:	bf38      	it	cc
 8005754:	250c      	movcc	r5, #12
 8005756:	4629      	mov	r1, r5
 8005758:	4638      	mov	r0, r7
 800575a:	f7ff ffa5 	bl	80056a8 <sbrk_aligned>
 800575e:	3001      	adds	r0, #1
 8005760:	d02b      	beq.n	80057ba <_malloc_r+0xd2>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	442b      	add	r3, r5
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	e00e      	b.n	8005788 <_malloc_r+0xa0>
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	1b52      	subs	r2, r2, r5
 800576e:	d41e      	bmi.n	80057ae <_malloc_r+0xc6>
 8005770:	2a0b      	cmp	r2, #11
 8005772:	d916      	bls.n	80057a2 <_malloc_r+0xba>
 8005774:	1961      	adds	r1, r4, r5
 8005776:	42a3      	cmp	r3, r4
 8005778:	6025      	str	r5, [r4, #0]
 800577a:	bf18      	it	ne
 800577c:	6059      	strne	r1, [r3, #4]
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	bf08      	it	eq
 8005782:	6031      	streq	r1, [r6, #0]
 8005784:	5162      	str	r2, [r4, r5]
 8005786:	604b      	str	r3, [r1, #4]
 8005788:	4638      	mov	r0, r7
 800578a:	f104 060b 	add.w	r6, r4, #11
 800578e:	f000 fe0b 	bl	80063a8 <__malloc_unlock>
 8005792:	f026 0607 	bic.w	r6, r6, #7
 8005796:	1d23      	adds	r3, r4, #4
 8005798:	1af2      	subs	r2, r6, r3
 800579a:	d0b6      	beq.n	800570a <_malloc_r+0x22>
 800579c:	1b9b      	subs	r3, r3, r6
 800579e:	50a3      	str	r3, [r4, r2]
 80057a0:	e7b3      	b.n	800570a <_malloc_r+0x22>
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	bf0c      	ite	eq
 80057a8:	6032      	streq	r2, [r6, #0]
 80057aa:	605a      	strne	r2, [r3, #4]
 80057ac:	e7ec      	b.n	8005788 <_malloc_r+0xa0>
 80057ae:	4623      	mov	r3, r4
 80057b0:	6864      	ldr	r4, [r4, #4]
 80057b2:	e7b2      	b.n	800571a <_malloc_r+0x32>
 80057b4:	4634      	mov	r4, r6
 80057b6:	6876      	ldr	r6, [r6, #4]
 80057b8:	e7b9      	b.n	800572e <_malloc_r+0x46>
 80057ba:	230c      	movs	r3, #12
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4638      	mov	r0, r7
 80057c0:	f000 fdf2 	bl	80063a8 <__malloc_unlock>
 80057c4:	e7a1      	b.n	800570a <_malloc_r+0x22>
 80057c6:	6025      	str	r5, [r4, #0]
 80057c8:	e7de      	b.n	8005788 <_malloc_r+0xa0>
 80057ca:	bf00      	nop
 80057cc:	200002c4 	.word	0x200002c4

080057d0 <__sfputc_r>:
 80057d0:	6893      	ldr	r3, [r2, #8]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	b410      	push	{r4}
 80057d8:	6093      	str	r3, [r2, #8]
 80057da:	da08      	bge.n	80057ee <__sfputc_r+0x1e>
 80057dc:	6994      	ldr	r4, [r2, #24]
 80057de:	42a3      	cmp	r3, r4
 80057e0:	db01      	blt.n	80057e6 <__sfputc_r+0x16>
 80057e2:	290a      	cmp	r1, #10
 80057e4:	d103      	bne.n	80057ee <__sfputc_r+0x1e>
 80057e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ea:	f000 baef 	b.w	8005dcc <__swbuf_r>
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	1c58      	adds	r0, r3, #1
 80057f2:	6010      	str	r0, [r2, #0]
 80057f4:	7019      	strb	r1, [r3, #0]
 80057f6:	4608      	mov	r0, r1
 80057f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <__sfputs_r>:
 80057fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005800:	4606      	mov	r6, r0
 8005802:	460f      	mov	r7, r1
 8005804:	4614      	mov	r4, r2
 8005806:	18d5      	adds	r5, r2, r3
 8005808:	42ac      	cmp	r4, r5
 800580a:	d101      	bne.n	8005810 <__sfputs_r+0x12>
 800580c:	2000      	movs	r0, #0
 800580e:	e007      	b.n	8005820 <__sfputs_r+0x22>
 8005810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005814:	463a      	mov	r2, r7
 8005816:	4630      	mov	r0, r6
 8005818:	f7ff ffda 	bl	80057d0 <__sfputc_r>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d1f3      	bne.n	8005808 <__sfputs_r+0xa>
 8005820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005824 <_vfiprintf_r>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	460d      	mov	r5, r1
 800582a:	b09d      	sub	sp, #116	; 0x74
 800582c:	4614      	mov	r4, r2
 800582e:	4698      	mov	r8, r3
 8005830:	4606      	mov	r6, r0
 8005832:	b118      	cbz	r0, 800583c <_vfiprintf_r+0x18>
 8005834:	6983      	ldr	r3, [r0, #24]
 8005836:	b90b      	cbnz	r3, 800583c <_vfiprintf_r+0x18>
 8005838:	f000 fcaa 	bl	8006190 <__sinit>
 800583c:	4b89      	ldr	r3, [pc, #548]	; (8005a64 <_vfiprintf_r+0x240>)
 800583e:	429d      	cmp	r5, r3
 8005840:	d11b      	bne.n	800587a <_vfiprintf_r+0x56>
 8005842:	6875      	ldr	r5, [r6, #4]
 8005844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005846:	07d9      	lsls	r1, r3, #31
 8005848:	d405      	bmi.n	8005856 <_vfiprintf_r+0x32>
 800584a:	89ab      	ldrh	r3, [r5, #12]
 800584c:	059a      	lsls	r2, r3, #22
 800584e:	d402      	bmi.n	8005856 <_vfiprintf_r+0x32>
 8005850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005852:	f000 fd3b 	bl	80062cc <__retarget_lock_acquire_recursive>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	d501      	bpl.n	8005860 <_vfiprintf_r+0x3c>
 800585c:	692b      	ldr	r3, [r5, #16]
 800585e:	b9eb      	cbnz	r3, 800589c <_vfiprintf_r+0x78>
 8005860:	4629      	mov	r1, r5
 8005862:	4630      	mov	r0, r6
 8005864:	f000 fb04 	bl	8005e70 <__swsetup_r>
 8005868:	b1c0      	cbz	r0, 800589c <_vfiprintf_r+0x78>
 800586a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800586c:	07dc      	lsls	r4, r3, #31
 800586e:	d50e      	bpl.n	800588e <_vfiprintf_r+0x6a>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	b01d      	add	sp, #116	; 0x74
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	4b7b      	ldr	r3, [pc, #492]	; (8005a68 <_vfiprintf_r+0x244>)
 800587c:	429d      	cmp	r5, r3
 800587e:	d101      	bne.n	8005884 <_vfiprintf_r+0x60>
 8005880:	68b5      	ldr	r5, [r6, #8]
 8005882:	e7df      	b.n	8005844 <_vfiprintf_r+0x20>
 8005884:	4b79      	ldr	r3, [pc, #484]	; (8005a6c <_vfiprintf_r+0x248>)
 8005886:	429d      	cmp	r5, r3
 8005888:	bf08      	it	eq
 800588a:	68f5      	ldreq	r5, [r6, #12]
 800588c:	e7da      	b.n	8005844 <_vfiprintf_r+0x20>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	0598      	lsls	r0, r3, #22
 8005892:	d4ed      	bmi.n	8005870 <_vfiprintf_r+0x4c>
 8005894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005896:	f000 fd1a 	bl	80062ce <__retarget_lock_release_recursive>
 800589a:	e7e9      	b.n	8005870 <_vfiprintf_r+0x4c>
 800589c:	2300      	movs	r3, #0
 800589e:	9309      	str	r3, [sp, #36]	; 0x24
 80058a0:	2320      	movs	r3, #32
 80058a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058aa:	2330      	movs	r3, #48	; 0x30
 80058ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a70 <_vfiprintf_r+0x24c>
 80058b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058b4:	f04f 0901 	mov.w	r9, #1
 80058b8:	4623      	mov	r3, r4
 80058ba:	469a      	mov	sl, r3
 80058bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c0:	b10a      	cbz	r2, 80058c6 <_vfiprintf_r+0xa2>
 80058c2:	2a25      	cmp	r2, #37	; 0x25
 80058c4:	d1f9      	bne.n	80058ba <_vfiprintf_r+0x96>
 80058c6:	ebba 0b04 	subs.w	fp, sl, r4
 80058ca:	d00b      	beq.n	80058e4 <_vfiprintf_r+0xc0>
 80058cc:	465b      	mov	r3, fp
 80058ce:	4622      	mov	r2, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	4630      	mov	r0, r6
 80058d4:	f7ff ff93 	bl	80057fe <__sfputs_r>
 80058d8:	3001      	adds	r0, #1
 80058da:	f000 80aa 	beq.w	8005a32 <_vfiprintf_r+0x20e>
 80058de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e0:	445a      	add	r2, fp
 80058e2:	9209      	str	r2, [sp, #36]	; 0x24
 80058e4:	f89a 3000 	ldrb.w	r3, [sl]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80a2 	beq.w	8005a32 <_vfiprintf_r+0x20e>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f8:	f10a 0a01 	add.w	sl, sl, #1
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005904:	931a      	str	r3, [sp, #104]	; 0x68
 8005906:	4654      	mov	r4, sl
 8005908:	2205      	movs	r2, #5
 800590a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590e:	4858      	ldr	r0, [pc, #352]	; (8005a70 <_vfiprintf_r+0x24c>)
 8005910:	f7fa fc66 	bl	80001e0 <memchr>
 8005914:	9a04      	ldr	r2, [sp, #16]
 8005916:	b9d8      	cbnz	r0, 8005950 <_vfiprintf_r+0x12c>
 8005918:	06d1      	lsls	r1, r2, #27
 800591a:	bf44      	itt	mi
 800591c:	2320      	movmi	r3, #32
 800591e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005922:	0713      	lsls	r3, r2, #28
 8005924:	bf44      	itt	mi
 8005926:	232b      	movmi	r3, #43	; 0x2b
 8005928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800592c:	f89a 3000 	ldrb.w	r3, [sl]
 8005930:	2b2a      	cmp	r3, #42	; 0x2a
 8005932:	d015      	beq.n	8005960 <_vfiprintf_r+0x13c>
 8005934:	9a07      	ldr	r2, [sp, #28]
 8005936:	4654      	mov	r4, sl
 8005938:	2000      	movs	r0, #0
 800593a:	f04f 0c0a 	mov.w	ip, #10
 800593e:	4621      	mov	r1, r4
 8005940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005944:	3b30      	subs	r3, #48	; 0x30
 8005946:	2b09      	cmp	r3, #9
 8005948:	d94e      	bls.n	80059e8 <_vfiprintf_r+0x1c4>
 800594a:	b1b0      	cbz	r0, 800597a <_vfiprintf_r+0x156>
 800594c:	9207      	str	r2, [sp, #28]
 800594e:	e014      	b.n	800597a <_vfiprintf_r+0x156>
 8005950:	eba0 0308 	sub.w	r3, r0, r8
 8005954:	fa09 f303 	lsl.w	r3, r9, r3
 8005958:	4313      	orrs	r3, r2
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	46a2      	mov	sl, r4
 800595e:	e7d2      	b.n	8005906 <_vfiprintf_r+0xe2>
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	bfbb      	ittet	lt
 800596c:	425b      	neglt	r3, r3
 800596e:	f042 0202 	orrlt.w	r2, r2, #2
 8005972:	9307      	strge	r3, [sp, #28]
 8005974:	9307      	strlt	r3, [sp, #28]
 8005976:	bfb8      	it	lt
 8005978:	9204      	strlt	r2, [sp, #16]
 800597a:	7823      	ldrb	r3, [r4, #0]
 800597c:	2b2e      	cmp	r3, #46	; 0x2e
 800597e:	d10c      	bne.n	800599a <_vfiprintf_r+0x176>
 8005980:	7863      	ldrb	r3, [r4, #1]
 8005982:	2b2a      	cmp	r3, #42	; 0x2a
 8005984:	d135      	bne.n	80059f2 <_vfiprintf_r+0x1ce>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9203      	str	r2, [sp, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfb8      	it	lt
 8005992:	f04f 33ff 	movlt.w	r3, #4294967295
 8005996:	3402      	adds	r4, #2
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a80 <_vfiprintf_r+0x25c>
 800599e:	7821      	ldrb	r1, [r4, #0]
 80059a0:	2203      	movs	r2, #3
 80059a2:	4650      	mov	r0, sl
 80059a4:	f7fa fc1c 	bl	80001e0 <memchr>
 80059a8:	b140      	cbz	r0, 80059bc <_vfiprintf_r+0x198>
 80059aa:	2340      	movs	r3, #64	; 0x40
 80059ac:	eba0 000a 	sub.w	r0, r0, sl
 80059b0:	fa03 f000 	lsl.w	r0, r3, r0
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	4303      	orrs	r3, r0
 80059b8:	3401      	adds	r4, #1
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	482c      	ldr	r0, [pc, #176]	; (8005a74 <_vfiprintf_r+0x250>)
 80059c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c6:	2206      	movs	r2, #6
 80059c8:	f7fa fc0a 	bl	80001e0 <memchr>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d03f      	beq.n	8005a50 <_vfiprintf_r+0x22c>
 80059d0:	4b29      	ldr	r3, [pc, #164]	; (8005a78 <_vfiprintf_r+0x254>)
 80059d2:	bb1b      	cbnz	r3, 8005a1c <_vfiprintf_r+0x1f8>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	3307      	adds	r3, #7
 80059d8:	f023 0307 	bic.w	r3, r3, #7
 80059dc:	3308      	adds	r3, #8
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	443b      	add	r3, r7
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	e767      	b.n	80058b8 <_vfiprintf_r+0x94>
 80059e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ec:	460c      	mov	r4, r1
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7a5      	b.n	800593e <_vfiprintf_r+0x11a>
 80059f2:	2300      	movs	r3, #0
 80059f4:	3401      	adds	r4, #1
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	4619      	mov	r1, r3
 80059fa:	f04f 0c0a 	mov.w	ip, #10
 80059fe:	4620      	mov	r0, r4
 8005a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a04:	3a30      	subs	r2, #48	; 0x30
 8005a06:	2a09      	cmp	r2, #9
 8005a08:	d903      	bls.n	8005a12 <_vfiprintf_r+0x1ee>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0c5      	beq.n	800599a <_vfiprintf_r+0x176>
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	e7c3      	b.n	800599a <_vfiprintf_r+0x176>
 8005a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a16:	4604      	mov	r4, r0
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e7f0      	b.n	80059fe <_vfiprintf_r+0x1da>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <_vfiprintf_r+0x258>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4630      	mov	r0, r6
 8005a28:	f3af 8000 	nop.w
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	1c78      	adds	r0, r7, #1
 8005a30:	d1d6      	bne.n	80059e0 <_vfiprintf_r+0x1bc>
 8005a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a34:	07d9      	lsls	r1, r3, #31
 8005a36:	d405      	bmi.n	8005a44 <_vfiprintf_r+0x220>
 8005a38:	89ab      	ldrh	r3, [r5, #12]
 8005a3a:	059a      	lsls	r2, r3, #22
 8005a3c:	d402      	bmi.n	8005a44 <_vfiprintf_r+0x220>
 8005a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a40:	f000 fc45 	bl	80062ce <__retarget_lock_release_recursive>
 8005a44:	89ab      	ldrh	r3, [r5, #12]
 8005a46:	065b      	lsls	r3, r3, #25
 8005a48:	f53f af12 	bmi.w	8005870 <_vfiprintf_r+0x4c>
 8005a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a4e:	e711      	b.n	8005874 <_vfiprintf_r+0x50>
 8005a50:	ab03      	add	r3, sp, #12
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <_vfiprintf_r+0x258>)
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f000 f880 	bl	8005b60 <_printf_i>
 8005a60:	e7e4      	b.n	8005a2c <_vfiprintf_r+0x208>
 8005a62:	bf00      	nop
 8005a64:	080067e0 	.word	0x080067e0
 8005a68:	08006800 	.word	0x08006800
 8005a6c:	080067c0 	.word	0x080067c0
 8005a70:	0800678d 	.word	0x0800678d
 8005a74:	08006797 	.word	0x08006797
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	080057ff 	.word	0x080057ff
 8005a80:	08006793 	.word	0x08006793

08005a84 <_printf_common>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	4616      	mov	r6, r2
 8005a8a:	4699      	mov	r9, r3
 8005a8c:	688a      	ldr	r2, [r1, #8]
 8005a8e:	690b      	ldr	r3, [r1, #16]
 8005a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bfb8      	it	lt
 8005a98:	4613      	movlt	r3, r2
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	b10a      	cbz	r2, 8005aaa <_printf_common+0x26>
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	0699      	lsls	r1, r3, #26
 8005aae:	bf42      	ittt	mi
 8005ab0:	6833      	ldrmi	r3, [r6, #0]
 8005ab2:	3302      	addmi	r3, #2
 8005ab4:	6033      	strmi	r3, [r6, #0]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	f015 0506 	ands.w	r5, r5, #6
 8005abc:	d106      	bne.n	8005acc <_printf_common+0x48>
 8005abe:	f104 0a19 	add.w	sl, r4, #25
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	6832      	ldr	r2, [r6, #0]
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dc26      	bgt.n	8005b1a <_printf_common+0x96>
 8005acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad0:	1e13      	subs	r3, r2, #0
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	bf18      	it	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	0692      	lsls	r2, r2, #26
 8005ada:	d42b      	bmi.n	8005b34 <_printf_common+0xb0>
 8005adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d01e      	beq.n	8005b28 <_printf_common+0xa4>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	68e5      	ldr	r5, [r4, #12]
 8005aee:	6832      	ldr	r2, [r6, #0]
 8005af0:	f003 0306 	and.w	r3, r3, #6
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	bf08      	it	eq
 8005af8:	1aad      	subeq	r5, r5, r2
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	bf0c      	ite	eq
 8005b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b04:	2500      	movne	r5, #0
 8005b06:	4293      	cmp	r3, r2
 8005b08:	bfc4      	itt	gt
 8005b0a:	1a9b      	subgt	r3, r3, r2
 8005b0c:	18ed      	addgt	r5, r5, r3
 8005b0e:	2600      	movs	r6, #0
 8005b10:	341a      	adds	r4, #26
 8005b12:	42b5      	cmp	r5, r6
 8005b14:	d11a      	bne.n	8005b4c <_printf_common+0xc8>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e008      	b.n	8005b2c <_printf_common+0xa8>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4638      	mov	r0, r7
 8005b22:	47c0      	blx	r8
 8005b24:	3001      	adds	r0, #1
 8005b26:	d103      	bne.n	8005b30 <_printf_common+0xac>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b30:	3501      	adds	r5, #1
 8005b32:	e7c6      	b.n	8005ac2 <_printf_common+0x3e>
 8005b34:	18e1      	adds	r1, r4, r3
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	2030      	movs	r0, #48	; 0x30
 8005b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b3e:	4422      	add	r2, r4
 8005b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b48:	3302      	adds	r3, #2
 8005b4a:	e7c7      	b.n	8005adc <_printf_common+0x58>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d0e6      	beq.n	8005b28 <_printf_common+0xa4>
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7d9      	b.n	8005b12 <_printf_common+0x8e>
	...

08005b60 <_printf_i>:
 8005b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	7e0f      	ldrb	r7, [r1, #24]
 8005b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b68:	2f78      	cmp	r7, #120	; 0x78
 8005b6a:	4691      	mov	r9, r2
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	469a      	mov	sl, r3
 8005b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b76:	d807      	bhi.n	8005b88 <_printf_i+0x28>
 8005b78:	2f62      	cmp	r7, #98	; 0x62
 8005b7a:	d80a      	bhi.n	8005b92 <_printf_i+0x32>
 8005b7c:	2f00      	cmp	r7, #0
 8005b7e:	f000 80d8 	beq.w	8005d32 <_printf_i+0x1d2>
 8005b82:	2f58      	cmp	r7, #88	; 0x58
 8005b84:	f000 80a3 	beq.w	8005cce <_printf_i+0x16e>
 8005b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b90:	e03a      	b.n	8005c08 <_printf_i+0xa8>
 8005b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b96:	2b15      	cmp	r3, #21
 8005b98:	d8f6      	bhi.n	8005b88 <_printf_i+0x28>
 8005b9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ba0 <_printf_i+0x40>)
 8005b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005c0d 	.word	0x08005c0d
 8005ba8:	08005b89 	.word	0x08005b89
 8005bac:	08005b89 	.word	0x08005b89
 8005bb0:	08005b89 	.word	0x08005b89
 8005bb4:	08005b89 	.word	0x08005b89
 8005bb8:	08005c0d 	.word	0x08005c0d
 8005bbc:	08005b89 	.word	0x08005b89
 8005bc0:	08005b89 	.word	0x08005b89
 8005bc4:	08005b89 	.word	0x08005b89
 8005bc8:	08005b89 	.word	0x08005b89
 8005bcc:	08005d19 	.word	0x08005d19
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005cfb 	.word	0x08005cfb
 8005bd8:	08005b89 	.word	0x08005b89
 8005bdc:	08005b89 	.word	0x08005b89
 8005be0:	08005d3b 	.word	0x08005d3b
 8005be4:	08005b89 	.word	0x08005b89
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005b89 	.word	0x08005b89
 8005bf0:	08005b89 	.word	0x08005b89
 8005bf4:	08005d03 	.word	0x08005d03
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	602a      	str	r2, [r5, #0]
 8005c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a3      	b.n	8005d54 <_printf_i+0x1f4>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	6829      	ldr	r1, [r5, #0]
 8005c10:	0606      	lsls	r6, r0, #24
 8005c12:	f101 0304 	add.w	r3, r1, #4
 8005c16:	d50a      	bpl.n	8005c2e <_printf_i+0xce>
 8005c18:	680e      	ldr	r6, [r1, #0]
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	2e00      	cmp	r6, #0
 8005c1e:	da03      	bge.n	8005c28 <_printf_i+0xc8>
 8005c20:	232d      	movs	r3, #45	; 0x2d
 8005c22:	4276      	negs	r6, r6
 8005c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c28:	485e      	ldr	r0, [pc, #376]	; (8005da4 <_printf_i+0x244>)
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	e019      	b.n	8005c62 <_printf_i+0x102>
 8005c2e:	680e      	ldr	r6, [r1, #0]
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c36:	bf18      	it	ne
 8005c38:	b236      	sxthne	r6, r6
 8005c3a:	e7ef      	b.n	8005c1c <_printf_i+0xbc>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	6029      	str	r1, [r5, #0]
 8005c44:	0601      	lsls	r1, r0, #24
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0xec>
 8005c48:	681e      	ldr	r6, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0xf2>
 8005c4c:	0646      	lsls	r6, r0, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0xe8>
 8005c50:	881e      	ldrh	r6, [r3, #0]
 8005c52:	4854      	ldr	r0, [pc, #336]	; (8005da4 <_printf_i+0x244>)
 8005c54:	2f6f      	cmp	r7, #111	; 0x6f
 8005c56:	bf0c      	ite	eq
 8005c58:	2308      	moveq	r3, #8
 8005c5a:	230a      	movne	r3, #10
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c62:	6865      	ldr	r5, [r4, #4]
 8005c64:	60a5      	str	r5, [r4, #8]
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	bfa2      	ittt	ge
 8005c6a:	6821      	ldrge	r1, [r4, #0]
 8005c6c:	f021 0104 	bicge.w	r1, r1, #4
 8005c70:	6021      	strge	r1, [r4, #0]
 8005c72:	b90e      	cbnz	r6, 8005c78 <_printf_i+0x118>
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	d04d      	beq.n	8005d14 <_printf_i+0x1b4>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c82:	5dc7      	ldrb	r7, [r0, r7]
 8005c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c88:	4637      	mov	r7, r6
 8005c8a:	42bb      	cmp	r3, r7
 8005c8c:	460e      	mov	r6, r1
 8005c8e:	d9f4      	bls.n	8005c7a <_printf_i+0x11a>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10b      	bne.n	8005cac <_printf_i+0x14c>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07de      	lsls	r6, r3, #31
 8005c98:	d508      	bpl.n	8005cac <_printf_i+0x14c>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	bfde      	ittt	le
 8005ca2:	2330      	movle	r3, #48	; 0x30
 8005ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cac:	1b52      	subs	r2, r2, r5
 8005cae:	6122      	str	r2, [r4, #16]
 8005cb0:	f8cd a000 	str.w	sl, [sp]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	aa03      	add	r2, sp, #12
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fee2 	bl	8005a84 <_printf_common>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d14c      	bne.n	8005d5e <_printf_i+0x1fe>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	b004      	add	sp, #16
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	4835      	ldr	r0, [pc, #212]	; (8005da4 <_printf_i+0x244>)
 8005cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cd4:	6829      	ldr	r1, [r5, #0]
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cdc:	6029      	str	r1, [r5, #0]
 8005cde:	061d      	lsls	r5, r3, #24
 8005ce0:	d514      	bpl.n	8005d0c <_printf_i+0x1ac>
 8005ce2:	07df      	lsls	r7, r3, #31
 8005ce4:	bf44      	itt	mi
 8005ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cea:	6023      	strmi	r3, [r4, #0]
 8005cec:	b91e      	cbnz	r6, 8005cf6 <_printf_i+0x196>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f023 0320 	bic.w	r3, r3, #32
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	2310      	movs	r3, #16
 8005cf8:	e7b0      	b.n	8005c5c <_printf_i+0xfc>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	f043 0320 	orr.w	r3, r3, #32
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	2378      	movs	r3, #120	; 0x78
 8005d04:	4828      	ldr	r0, [pc, #160]	; (8005da8 <_printf_i+0x248>)
 8005d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d0a:	e7e3      	b.n	8005cd4 <_printf_i+0x174>
 8005d0c:	0659      	lsls	r1, r3, #25
 8005d0e:	bf48      	it	mi
 8005d10:	b2b6      	uxthmi	r6, r6
 8005d12:	e7e6      	b.n	8005ce2 <_printf_i+0x182>
 8005d14:	4615      	mov	r5, r2
 8005d16:	e7bb      	b.n	8005c90 <_printf_i+0x130>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	6826      	ldr	r6, [r4, #0]
 8005d1c:	6961      	ldr	r1, [r4, #20]
 8005d1e:	1d18      	adds	r0, r3, #4
 8005d20:	6028      	str	r0, [r5, #0]
 8005d22:	0635      	lsls	r5, r6, #24
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0x1cc>
 8005d28:	6019      	str	r1, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0x1d2>
 8005d2c:	0670      	lsls	r0, r6, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0x1c8>
 8005d30:	8019      	strh	r1, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	4615      	mov	r5, r2
 8005d38:	e7ba      	b.n	8005cb0 <_printf_i+0x150>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	602a      	str	r2, [r5, #0]
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4628      	mov	r0, r5
 8005d48:	f7fa fa4a 	bl	80001e0 <memchr>
 8005d4c:	b108      	cbz	r0, 8005d52 <_printf_i+0x1f2>
 8005d4e:	1b40      	subs	r0, r0, r5
 8005d50:	6060      	str	r0, [r4, #4]
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2300      	movs	r3, #0
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5c:	e7a8      	b.n	8005cb0 <_printf_i+0x150>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	462a      	mov	r2, r5
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0ab      	beq.n	8005cc4 <_printf_i+0x164>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d413      	bmi.n	8005d9a <_printf_i+0x23a>
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bfb8      	it	lt
 8005d7a:	4618      	movlt	r0, r3
 8005d7c:	e7a4      	b.n	8005cc8 <_printf_i+0x168>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4632      	mov	r2, r6
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d09b      	beq.n	8005cc4 <_printf_i+0x164>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	9903      	ldr	r1, [sp, #12]
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dcf2      	bgt.n	8005d7e <_printf_i+0x21e>
 8005d98:	e7eb      	b.n	8005d72 <_printf_i+0x212>
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	f104 0619 	add.w	r6, r4, #25
 8005da0:	e7f5      	b.n	8005d8e <_printf_i+0x22e>
 8005da2:	bf00      	nop
 8005da4:	0800679e 	.word	0x0800679e
 8005da8:	080067af 	.word	0x080067af

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb fe80 	bl	8001abc <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	200002d0 	.word	0x200002d0

08005dcc <__swbuf_r>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	b118      	cbz	r0, 8005dde <__swbuf_r+0x12>
 8005dd6:	6983      	ldr	r3, [r0, #24]
 8005dd8:	b90b      	cbnz	r3, 8005dde <__swbuf_r+0x12>
 8005dda:	f000 f9d9 	bl	8006190 <__sinit>
 8005dde:	4b21      	ldr	r3, [pc, #132]	; (8005e64 <__swbuf_r+0x98>)
 8005de0:	429c      	cmp	r4, r3
 8005de2:	d12b      	bne.n	8005e3c <__swbuf_r+0x70>
 8005de4:	686c      	ldr	r4, [r5, #4]
 8005de6:	69a3      	ldr	r3, [r4, #24]
 8005de8:	60a3      	str	r3, [r4, #8]
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	071a      	lsls	r2, r3, #28
 8005dee:	d52f      	bpl.n	8005e50 <__swbuf_r+0x84>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	b36b      	cbz	r3, 8005e50 <__swbuf_r+0x84>
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	1ac0      	subs	r0, r0, r3
 8005dfa:	6963      	ldr	r3, [r4, #20]
 8005dfc:	b2f6      	uxtb	r6, r6
 8005dfe:	4283      	cmp	r3, r0
 8005e00:	4637      	mov	r7, r6
 8005e02:	dc04      	bgt.n	8005e0e <__swbuf_r+0x42>
 8005e04:	4621      	mov	r1, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f92e 	bl	8006068 <_fflush_r>
 8005e0c:	bb30      	cbnz	r0, 8005e5c <__swbuf_r+0x90>
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	60a3      	str	r3, [r4, #8]
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	6022      	str	r2, [r4, #0]
 8005e1a:	701e      	strb	r6, [r3, #0]
 8005e1c:	6963      	ldr	r3, [r4, #20]
 8005e1e:	3001      	adds	r0, #1
 8005e20:	4283      	cmp	r3, r0
 8005e22:	d004      	beq.n	8005e2e <__swbuf_r+0x62>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	07db      	lsls	r3, r3, #31
 8005e28:	d506      	bpl.n	8005e38 <__swbuf_r+0x6c>
 8005e2a:	2e0a      	cmp	r6, #10
 8005e2c:	d104      	bne.n	8005e38 <__swbuf_r+0x6c>
 8005e2e:	4621      	mov	r1, r4
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 f919 	bl	8006068 <_fflush_r>
 8005e36:	b988      	cbnz	r0, 8005e5c <__swbuf_r+0x90>
 8005e38:	4638      	mov	r0, r7
 8005e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <__swbuf_r+0x9c>)
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	d101      	bne.n	8005e46 <__swbuf_r+0x7a>
 8005e42:	68ac      	ldr	r4, [r5, #8]
 8005e44:	e7cf      	b.n	8005de6 <__swbuf_r+0x1a>
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <__swbuf_r+0xa0>)
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	bf08      	it	eq
 8005e4c:	68ec      	ldreq	r4, [r5, #12]
 8005e4e:	e7ca      	b.n	8005de6 <__swbuf_r+0x1a>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 f80c 	bl	8005e70 <__swsetup_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d0cb      	beq.n	8005df4 <__swbuf_r+0x28>
 8005e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e60:	e7ea      	b.n	8005e38 <__swbuf_r+0x6c>
 8005e62:	bf00      	nop
 8005e64:	080067e0 	.word	0x080067e0
 8005e68:	08006800 	.word	0x08006800
 8005e6c:	080067c0 	.word	0x080067c0

08005e70 <__swsetup_r>:
 8005e70:	4b32      	ldr	r3, [pc, #200]	; (8005f3c <__swsetup_r+0xcc>)
 8005e72:	b570      	push	{r4, r5, r6, lr}
 8005e74:	681d      	ldr	r5, [r3, #0]
 8005e76:	4606      	mov	r6, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	b125      	cbz	r5, 8005e86 <__swsetup_r+0x16>
 8005e7c:	69ab      	ldr	r3, [r5, #24]
 8005e7e:	b913      	cbnz	r3, 8005e86 <__swsetup_r+0x16>
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f985 	bl	8006190 <__sinit>
 8005e86:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <__swsetup_r+0xd0>)
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d10f      	bne.n	8005eac <__swsetup_r+0x3c>
 8005e8c:	686c      	ldr	r4, [r5, #4]
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e94:	0719      	lsls	r1, r3, #28
 8005e96:	d42c      	bmi.n	8005ef2 <__swsetup_r+0x82>
 8005e98:	06dd      	lsls	r5, r3, #27
 8005e9a:	d411      	bmi.n	8005ec0 <__swsetup_r+0x50>
 8005e9c:	2309      	movs	r3, #9
 8005e9e:	6033      	str	r3, [r6, #0]
 8005ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	e03e      	b.n	8005f2a <__swsetup_r+0xba>
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <__swsetup_r+0xd4>)
 8005eae:	429c      	cmp	r4, r3
 8005eb0:	d101      	bne.n	8005eb6 <__swsetup_r+0x46>
 8005eb2:	68ac      	ldr	r4, [r5, #8]
 8005eb4:	e7eb      	b.n	8005e8e <__swsetup_r+0x1e>
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <__swsetup_r+0xd8>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	bf08      	it	eq
 8005ebc:	68ec      	ldreq	r4, [r5, #12]
 8005ebe:	e7e6      	b.n	8005e8e <__swsetup_r+0x1e>
 8005ec0:	0758      	lsls	r0, r3, #29
 8005ec2:	d512      	bpl.n	8005eea <__swsetup_r+0x7a>
 8005ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ec6:	b141      	cbz	r1, 8005eda <__swsetup_r+0x6a>
 8005ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	d002      	beq.n	8005ed6 <__swsetup_r+0x66>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f7ff fb9d 	bl	8005610 <_free_r>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6063      	str	r3, [r4, #4]
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f043 0308 	orr.w	r3, r3, #8
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	b94b      	cbnz	r3, 8005f0a <__swsetup_r+0x9a>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f00:	d003      	beq.n	8005f0a <__swsetup_r+0x9a>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4630      	mov	r0, r6
 8005f06:	f000 fa09 	bl	800631c <__smakebuf_r>
 8005f0a:	89a0      	ldrh	r0, [r4, #12]
 8005f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f10:	f010 0301 	ands.w	r3, r0, #1
 8005f14:	d00a      	beq.n	8005f2c <__swsetup_r+0xbc>
 8005f16:	2300      	movs	r3, #0
 8005f18:	60a3      	str	r3, [r4, #8]
 8005f1a:	6963      	ldr	r3, [r4, #20]
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	61a3      	str	r3, [r4, #24]
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	b943      	cbnz	r3, 8005f36 <__swsetup_r+0xc6>
 8005f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f28:	d1ba      	bne.n	8005ea0 <__swsetup_r+0x30>
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	0781      	lsls	r1, r0, #30
 8005f2e:	bf58      	it	pl
 8005f30:	6963      	ldrpl	r3, [r4, #20]
 8005f32:	60a3      	str	r3, [r4, #8]
 8005f34:	e7f4      	b.n	8005f20 <__swsetup_r+0xb0>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e7f7      	b.n	8005f2a <__swsetup_r+0xba>
 8005f3a:	bf00      	nop
 8005f3c:	20000018 	.word	0x20000018
 8005f40:	080067e0 	.word	0x080067e0
 8005f44:	08006800 	.word	0x08006800
 8005f48:	080067c0 	.word	0x080067c0

08005f4c <abort>:
 8005f4c:	b508      	push	{r3, lr}
 8005f4e:	2006      	movs	r0, #6
 8005f50:	f000 fa58 	bl	8006404 <raise>
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fb fd39 	bl	80019cc <_exit>
	...

08005f5c <__sflush_r>:
 8005f5c:	898a      	ldrh	r2, [r1, #12]
 8005f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	4605      	mov	r5, r0
 8005f64:	0710      	lsls	r0, r2, #28
 8005f66:	460c      	mov	r4, r1
 8005f68:	d458      	bmi.n	800601c <__sflush_r+0xc0>
 8005f6a:	684b      	ldr	r3, [r1, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dc05      	bgt.n	8005f7c <__sflush_r+0x20>
 8005f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dc02      	bgt.n	8005f7c <__sflush_r+0x20>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	d0f9      	beq.n	8005f76 <__sflush_r+0x1a>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f88:	682f      	ldr	r7, [r5, #0]
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	d032      	beq.n	8005ff4 <__sflush_r+0x98>
 8005f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	075a      	lsls	r2, r3, #29
 8005f94:	d505      	bpl.n	8005fa2 <__sflush_r+0x46>
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	1ac0      	subs	r0, r0, r3
 8005f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f9c:	b10b      	cbz	r3, 8005fa2 <__sflush_r+0x46>
 8005f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fa0:	1ac0      	subs	r0, r0, r3
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fa8:	6a21      	ldr	r1, [r4, #32]
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b0      	blx	r6
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	d106      	bne.n	8005fc2 <__sflush_r+0x66>
 8005fb4:	6829      	ldr	r1, [r5, #0]
 8005fb6:	291d      	cmp	r1, #29
 8005fb8:	d82c      	bhi.n	8006014 <__sflush_r+0xb8>
 8005fba:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <__sflush_r+0x108>)
 8005fbc:	40ca      	lsrs	r2, r1
 8005fbe:	07d6      	lsls	r6, r2, #31
 8005fc0:	d528      	bpl.n	8006014 <__sflush_r+0xb8>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	6062      	str	r2, [r4, #4]
 8005fc6:	04d9      	lsls	r1, r3, #19
 8005fc8:	6922      	ldr	r2, [r4, #16]
 8005fca:	6022      	str	r2, [r4, #0]
 8005fcc:	d504      	bpl.n	8005fd8 <__sflush_r+0x7c>
 8005fce:	1c42      	adds	r2, r0, #1
 8005fd0:	d101      	bne.n	8005fd6 <__sflush_r+0x7a>
 8005fd2:	682b      	ldr	r3, [r5, #0]
 8005fd4:	b903      	cbnz	r3, 8005fd8 <__sflush_r+0x7c>
 8005fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8005fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fda:	602f      	str	r7, [r5, #0]
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	d0ca      	beq.n	8005f76 <__sflush_r+0x1a>
 8005fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fe4:	4299      	cmp	r1, r3
 8005fe6:	d002      	beq.n	8005fee <__sflush_r+0x92>
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f7ff fb11 	bl	8005610 <_free_r>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ff2:	e7c1      	b.n	8005f78 <__sflush_r+0x1c>
 8005ff4:	6a21      	ldr	r1, [r4, #32]
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b0      	blx	r6
 8005ffc:	1c41      	adds	r1, r0, #1
 8005ffe:	d1c7      	bne.n	8005f90 <__sflush_r+0x34>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0c4      	beq.n	8005f90 <__sflush_r+0x34>
 8006006:	2b1d      	cmp	r3, #29
 8006008:	d001      	beq.n	800600e <__sflush_r+0xb2>
 800600a:	2b16      	cmp	r3, #22
 800600c:	d101      	bne.n	8006012 <__sflush_r+0xb6>
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	e7b1      	b.n	8005f76 <__sflush_r+0x1a>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	e7ad      	b.n	8005f78 <__sflush_r+0x1c>
 800601c:	690f      	ldr	r7, [r1, #16]
 800601e:	2f00      	cmp	r7, #0
 8006020:	d0a9      	beq.n	8005f76 <__sflush_r+0x1a>
 8006022:	0793      	lsls	r3, r2, #30
 8006024:	680e      	ldr	r6, [r1, #0]
 8006026:	bf08      	it	eq
 8006028:	694b      	ldreq	r3, [r1, #20]
 800602a:	600f      	str	r7, [r1, #0]
 800602c:	bf18      	it	ne
 800602e:	2300      	movne	r3, #0
 8006030:	eba6 0807 	sub.w	r8, r6, r7
 8006034:	608b      	str	r3, [r1, #8]
 8006036:	f1b8 0f00 	cmp.w	r8, #0
 800603a:	dd9c      	ble.n	8005f76 <__sflush_r+0x1a>
 800603c:	6a21      	ldr	r1, [r4, #32]
 800603e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006040:	4643      	mov	r3, r8
 8006042:	463a      	mov	r2, r7
 8006044:	4628      	mov	r0, r5
 8006046:	47b0      	blx	r6
 8006048:	2800      	cmp	r0, #0
 800604a:	dc06      	bgt.n	800605a <__sflush_r+0xfe>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e78e      	b.n	8005f78 <__sflush_r+0x1c>
 800605a:	4407      	add	r7, r0
 800605c:	eba8 0800 	sub.w	r8, r8, r0
 8006060:	e7e9      	b.n	8006036 <__sflush_r+0xda>
 8006062:	bf00      	nop
 8006064:	20400001 	.word	0x20400001

08006068 <_fflush_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	690b      	ldr	r3, [r1, #16]
 800606c:	4605      	mov	r5, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b913      	cbnz	r3, 8006078 <_fflush_r+0x10>
 8006072:	2500      	movs	r5, #0
 8006074:	4628      	mov	r0, r5
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	b118      	cbz	r0, 8006082 <_fflush_r+0x1a>
 800607a:	6983      	ldr	r3, [r0, #24]
 800607c:	b90b      	cbnz	r3, 8006082 <_fflush_r+0x1a>
 800607e:	f000 f887 	bl	8006190 <__sinit>
 8006082:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <_fflush_r+0x6c>)
 8006084:	429c      	cmp	r4, r3
 8006086:	d11b      	bne.n	80060c0 <_fflush_r+0x58>
 8006088:	686c      	ldr	r4, [r5, #4]
 800608a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ef      	beq.n	8006072 <_fflush_r+0xa>
 8006092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006094:	07d0      	lsls	r0, r2, #31
 8006096:	d404      	bmi.n	80060a2 <_fflush_r+0x3a>
 8006098:	0599      	lsls	r1, r3, #22
 800609a:	d402      	bmi.n	80060a2 <_fflush_r+0x3a>
 800609c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800609e:	f000 f915 	bl	80062cc <__retarget_lock_acquire_recursive>
 80060a2:	4628      	mov	r0, r5
 80060a4:	4621      	mov	r1, r4
 80060a6:	f7ff ff59 	bl	8005f5c <__sflush_r>
 80060aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ac:	07da      	lsls	r2, r3, #31
 80060ae:	4605      	mov	r5, r0
 80060b0:	d4e0      	bmi.n	8006074 <_fflush_r+0xc>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	059b      	lsls	r3, r3, #22
 80060b6:	d4dd      	bmi.n	8006074 <_fflush_r+0xc>
 80060b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ba:	f000 f908 	bl	80062ce <__retarget_lock_release_recursive>
 80060be:	e7d9      	b.n	8006074 <_fflush_r+0xc>
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <_fflush_r+0x70>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d101      	bne.n	80060ca <_fflush_r+0x62>
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	e7df      	b.n	800608a <_fflush_r+0x22>
 80060ca:	4b04      	ldr	r3, [pc, #16]	; (80060dc <_fflush_r+0x74>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	bf08      	it	eq
 80060d0:	68ec      	ldreq	r4, [r5, #12]
 80060d2:	e7da      	b.n	800608a <_fflush_r+0x22>
 80060d4:	080067e0 	.word	0x080067e0
 80060d8:	08006800 	.word	0x08006800
 80060dc:	080067c0 	.word	0x080067c0

080060e0 <std>:
 80060e0:	2300      	movs	r3, #0
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ee:	6083      	str	r3, [r0, #8]
 80060f0:	8181      	strh	r1, [r0, #12]
 80060f2:	6643      	str	r3, [r0, #100]	; 0x64
 80060f4:	81c2      	strh	r2, [r0, #14]
 80060f6:	6183      	str	r3, [r0, #24]
 80060f8:	4619      	mov	r1, r3
 80060fa:	2208      	movs	r2, #8
 80060fc:	305c      	adds	r0, #92	; 0x5c
 80060fe:	f7ff f95f 	bl	80053c0 <memset>
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <std+0x38>)
 8006104:	6263      	str	r3, [r4, #36]	; 0x24
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std+0x3c>)
 8006108:	62a3      	str	r3, [r4, #40]	; 0x28
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <std+0x40>)
 800610c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <std+0x44>)
 8006110:	6224      	str	r4, [r4, #32]
 8006112:	6323      	str	r3, [r4, #48]	; 0x30
 8006114:	bd10      	pop	{r4, pc}
 8006116:	bf00      	nop
 8006118:	0800643d 	.word	0x0800643d
 800611c:	0800645f 	.word	0x0800645f
 8006120:	08006497 	.word	0x08006497
 8006124:	080064bb 	.word	0x080064bb

08006128 <_cleanup_r>:
 8006128:	4901      	ldr	r1, [pc, #4]	; (8006130 <_cleanup_r+0x8>)
 800612a:	f000 b8af 	b.w	800628c <_fwalk_reent>
 800612e:	bf00      	nop
 8006130:	08006069 	.word	0x08006069

08006134 <__sfmoreglue>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	2268      	movs	r2, #104	; 0x68
 8006138:	1e4d      	subs	r5, r1, #1
 800613a:	4355      	muls	r5, r2
 800613c:	460e      	mov	r6, r1
 800613e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006142:	f7ff fad1 	bl	80056e8 <_malloc_r>
 8006146:	4604      	mov	r4, r0
 8006148:	b140      	cbz	r0, 800615c <__sfmoreglue+0x28>
 800614a:	2100      	movs	r1, #0
 800614c:	e9c0 1600 	strd	r1, r6, [r0]
 8006150:	300c      	adds	r0, #12
 8006152:	60a0      	str	r0, [r4, #8]
 8006154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006158:	f7ff f932 	bl	80053c0 <memset>
 800615c:	4620      	mov	r0, r4
 800615e:	bd70      	pop	{r4, r5, r6, pc}

08006160 <__sfp_lock_acquire>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__sfp_lock_acquire+0x8>)
 8006162:	f000 b8b3 	b.w	80062cc <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	200002cd 	.word	0x200002cd

0800616c <__sfp_lock_release>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__sfp_lock_release+0x8>)
 800616e:	f000 b8ae 	b.w	80062ce <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	200002cd 	.word	0x200002cd

08006178 <__sinit_lock_acquire>:
 8006178:	4801      	ldr	r0, [pc, #4]	; (8006180 <__sinit_lock_acquire+0x8>)
 800617a:	f000 b8a7 	b.w	80062cc <__retarget_lock_acquire_recursive>
 800617e:	bf00      	nop
 8006180:	200002ce 	.word	0x200002ce

08006184 <__sinit_lock_release>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__sinit_lock_release+0x8>)
 8006186:	f000 b8a2 	b.w	80062ce <__retarget_lock_release_recursive>
 800618a:	bf00      	nop
 800618c:	200002ce 	.word	0x200002ce

08006190 <__sinit>:
 8006190:	b510      	push	{r4, lr}
 8006192:	4604      	mov	r4, r0
 8006194:	f7ff fff0 	bl	8006178 <__sinit_lock_acquire>
 8006198:	69a3      	ldr	r3, [r4, #24]
 800619a:	b11b      	cbz	r3, 80061a4 <__sinit+0x14>
 800619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a0:	f7ff bff0 	b.w	8006184 <__sinit_lock_release>
 80061a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061a8:	6523      	str	r3, [r4, #80]	; 0x50
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <__sinit+0x68>)
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <__sinit+0x6c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	bf04      	itt	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	61a3      	streq	r3, [r4, #24]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f820 	bl	8006200 <__sfp>
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f81c 	bl	8006200 <__sfp>
 80061c8:	60a0      	str	r0, [r4, #8]
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f818 	bl	8006200 <__sfp>
 80061d0:	2200      	movs	r2, #0
 80061d2:	60e0      	str	r0, [r4, #12]
 80061d4:	2104      	movs	r1, #4
 80061d6:	6860      	ldr	r0, [r4, #4]
 80061d8:	f7ff ff82 	bl	80060e0 <std>
 80061dc:	68a0      	ldr	r0, [r4, #8]
 80061de:	2201      	movs	r2, #1
 80061e0:	2109      	movs	r1, #9
 80061e2:	f7ff ff7d 	bl	80060e0 <std>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	2112      	movs	r1, #18
 80061ec:	f7ff ff78 	bl	80060e0 <std>
 80061f0:	2301      	movs	r3, #1
 80061f2:	61a3      	str	r3, [r4, #24]
 80061f4:	e7d2      	b.n	800619c <__sinit+0xc>
 80061f6:	bf00      	nop
 80061f8:	080065d8 	.word	0x080065d8
 80061fc:	08006129 	.word	0x08006129

08006200 <__sfp>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	4607      	mov	r7, r0
 8006204:	f7ff ffac 	bl	8006160 <__sfp_lock_acquire>
 8006208:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <__sfp+0x84>)
 800620a:	681e      	ldr	r6, [r3, #0]
 800620c:	69b3      	ldr	r3, [r6, #24]
 800620e:	b913      	cbnz	r3, 8006216 <__sfp+0x16>
 8006210:	4630      	mov	r0, r6
 8006212:	f7ff ffbd 	bl	8006190 <__sinit>
 8006216:	3648      	adds	r6, #72	; 0x48
 8006218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800621c:	3b01      	subs	r3, #1
 800621e:	d503      	bpl.n	8006228 <__sfp+0x28>
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	b30b      	cbz	r3, 8006268 <__sfp+0x68>
 8006224:	6836      	ldr	r6, [r6, #0]
 8006226:	e7f7      	b.n	8006218 <__sfp+0x18>
 8006228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800622c:	b9d5      	cbnz	r5, 8006264 <__sfp+0x64>
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <__sfp+0x88>)
 8006230:	60e3      	str	r3, [r4, #12]
 8006232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006236:	6665      	str	r5, [r4, #100]	; 0x64
 8006238:	f000 f847 	bl	80062ca <__retarget_lock_init_recursive>
 800623c:	f7ff ff96 	bl	800616c <__sfp_lock_release>
 8006240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006248:	6025      	str	r5, [r4, #0]
 800624a:	61a5      	str	r5, [r4, #24]
 800624c:	2208      	movs	r2, #8
 800624e:	4629      	mov	r1, r5
 8006250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006254:	f7ff f8b4 	bl	80053c0 <memset>
 8006258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800625c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006260:	4620      	mov	r0, r4
 8006262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006264:	3468      	adds	r4, #104	; 0x68
 8006266:	e7d9      	b.n	800621c <__sfp+0x1c>
 8006268:	2104      	movs	r1, #4
 800626a:	4638      	mov	r0, r7
 800626c:	f7ff ff62 	bl	8006134 <__sfmoreglue>
 8006270:	4604      	mov	r4, r0
 8006272:	6030      	str	r0, [r6, #0]
 8006274:	2800      	cmp	r0, #0
 8006276:	d1d5      	bne.n	8006224 <__sfp+0x24>
 8006278:	f7ff ff78 	bl	800616c <__sfp_lock_release>
 800627c:	230c      	movs	r3, #12
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	e7ee      	b.n	8006260 <__sfp+0x60>
 8006282:	bf00      	nop
 8006284:	080065d8 	.word	0x080065d8
 8006288:	ffff0001 	.word	0xffff0001

0800628c <_fwalk_reent>:
 800628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006290:	4606      	mov	r6, r0
 8006292:	4688      	mov	r8, r1
 8006294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006298:	2700      	movs	r7, #0
 800629a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800629e:	f1b9 0901 	subs.w	r9, r9, #1
 80062a2:	d505      	bpl.n	80062b0 <_fwalk_reent+0x24>
 80062a4:	6824      	ldr	r4, [r4, #0]
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	d1f7      	bne.n	800629a <_fwalk_reent+0xe>
 80062aa:	4638      	mov	r0, r7
 80062ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b0:	89ab      	ldrh	r3, [r5, #12]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d907      	bls.n	80062c6 <_fwalk_reent+0x3a>
 80062b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062ba:	3301      	adds	r3, #1
 80062bc:	d003      	beq.n	80062c6 <_fwalk_reent+0x3a>
 80062be:	4629      	mov	r1, r5
 80062c0:	4630      	mov	r0, r6
 80062c2:	47c0      	blx	r8
 80062c4:	4307      	orrs	r7, r0
 80062c6:	3568      	adds	r5, #104	; 0x68
 80062c8:	e7e9      	b.n	800629e <_fwalk_reent+0x12>

080062ca <__retarget_lock_init_recursive>:
 80062ca:	4770      	bx	lr

080062cc <__retarget_lock_acquire_recursive>:
 80062cc:	4770      	bx	lr

080062ce <__retarget_lock_release_recursive>:
 80062ce:	4770      	bx	lr

080062d0 <__swhatbuf_r>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	460e      	mov	r6, r1
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2900      	cmp	r1, #0
 80062da:	b096      	sub	sp, #88	; 0x58
 80062dc:	4614      	mov	r4, r2
 80062de:	461d      	mov	r5, r3
 80062e0:	da08      	bge.n	80062f4 <__swhatbuf_r+0x24>
 80062e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	602a      	str	r2, [r5, #0]
 80062ea:	061a      	lsls	r2, r3, #24
 80062ec:	d410      	bmi.n	8006310 <__swhatbuf_r+0x40>
 80062ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f2:	e00e      	b.n	8006312 <__swhatbuf_r+0x42>
 80062f4:	466a      	mov	r2, sp
 80062f6:	f000 f907 	bl	8006508 <_fstat_r>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	dbf1      	blt.n	80062e2 <__swhatbuf_r+0x12>
 80062fe:	9a01      	ldr	r2, [sp, #4]
 8006300:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006304:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006308:	425a      	negs	r2, r3
 800630a:	415a      	adcs	r2, r3
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	e7ee      	b.n	80062ee <__swhatbuf_r+0x1e>
 8006310:	2340      	movs	r3, #64	; 0x40
 8006312:	2000      	movs	r0, #0
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	b016      	add	sp, #88	; 0x58
 8006318:	bd70      	pop	{r4, r5, r6, pc}
	...

0800631c <__smakebuf_r>:
 800631c:	898b      	ldrh	r3, [r1, #12]
 800631e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006320:	079d      	lsls	r5, r3, #30
 8006322:	4606      	mov	r6, r0
 8006324:	460c      	mov	r4, r1
 8006326:	d507      	bpl.n	8006338 <__smakebuf_r+0x1c>
 8006328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	2301      	movs	r3, #1
 8006332:	6163      	str	r3, [r4, #20]
 8006334:	b002      	add	sp, #8
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	ab01      	add	r3, sp, #4
 800633a:	466a      	mov	r2, sp
 800633c:	f7ff ffc8 	bl	80062d0 <__swhatbuf_r>
 8006340:	9900      	ldr	r1, [sp, #0]
 8006342:	4605      	mov	r5, r0
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff f9cf 	bl	80056e8 <_malloc_r>
 800634a:	b948      	cbnz	r0, 8006360 <__smakebuf_r+0x44>
 800634c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006350:	059a      	lsls	r2, r3, #22
 8006352:	d4ef      	bmi.n	8006334 <__smakebuf_r+0x18>
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	e7e3      	b.n	8006328 <__smakebuf_r+0xc>
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <__smakebuf_r+0x7c>)
 8006362:	62b3      	str	r3, [r6, #40]	; 0x28
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	6020      	str	r0, [r4, #0]
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	6163      	str	r3, [r4, #20]
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	6120      	str	r0, [r4, #16]
 8006376:	b15b      	cbz	r3, 8006390 <__smakebuf_r+0x74>
 8006378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637c:	4630      	mov	r0, r6
 800637e:	f000 f8d5 	bl	800652c <_isatty_r>
 8006382:	b128      	cbz	r0, 8006390 <__smakebuf_r+0x74>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	89a0      	ldrh	r0, [r4, #12]
 8006392:	4305      	orrs	r5, r0
 8006394:	81a5      	strh	r5, [r4, #12]
 8006396:	e7cd      	b.n	8006334 <__smakebuf_r+0x18>
 8006398:	08006129 	.word	0x08006129

0800639c <__malloc_lock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_lock+0x8>)
 800639e:	f7ff bf95 	b.w	80062cc <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	200002cc 	.word	0x200002cc

080063a8 <__malloc_unlock>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__malloc_unlock+0x8>)
 80063aa:	f7ff bf90 	b.w	80062ce <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	200002cc 	.word	0x200002cc

080063b4 <_raise_r>:
 80063b4:	291f      	cmp	r1, #31
 80063b6:	b538      	push	{r3, r4, r5, lr}
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	d904      	bls.n	80063c8 <_raise_r+0x14>
 80063be:	2316      	movs	r3, #22
 80063c0:	6003      	str	r3, [r0, #0]
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80063ca:	b112      	cbz	r2, 80063d2 <_raise_r+0x1e>
 80063cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063d0:	b94b      	cbnz	r3, 80063e6 <_raise_r+0x32>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f830 	bl	8006438 <_getpid_r>
 80063d8:	462a      	mov	r2, r5
 80063da:	4601      	mov	r1, r0
 80063dc:	4620      	mov	r0, r4
 80063de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e2:	f000 b817 	b.w	8006414 <_kill_r>
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d00a      	beq.n	8006400 <_raise_r+0x4c>
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	d103      	bne.n	80063f6 <_raise_r+0x42>
 80063ee:	2316      	movs	r3, #22
 80063f0:	6003      	str	r3, [r0, #0]
 80063f2:	2001      	movs	r0, #1
 80063f4:	e7e7      	b.n	80063c6 <_raise_r+0x12>
 80063f6:	2400      	movs	r4, #0
 80063f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063fc:	4628      	mov	r0, r5
 80063fe:	4798      	blx	r3
 8006400:	2000      	movs	r0, #0
 8006402:	e7e0      	b.n	80063c6 <_raise_r+0x12>

08006404 <raise>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <raise+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f7ff bfd3 	b.w	80063b4 <_raise_r>
 800640e:	bf00      	nop
 8006410:	20000018 	.word	0x20000018

08006414 <_kill_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d07      	ldr	r5, [pc, #28]	; (8006434 <_kill_r+0x20>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f7fb fac3 	bl	80019ac <_kill>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_kill_r+0x1c>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b103      	cbz	r3, 8006430 <_kill_r+0x1c>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	200002d0 	.word	0x200002d0

08006438 <_getpid_r>:
 8006438:	f7fb bab0 	b.w	800199c <_getpid>

0800643c <__sread>:
 800643c:	b510      	push	{r4, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	f000 f894 	bl	8006570 <_read_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	bfab      	itete	ge
 800644c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800644e:	89a3      	ldrhlt	r3, [r4, #12]
 8006450:	181b      	addge	r3, r3, r0
 8006452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006456:	bfac      	ite	ge
 8006458:	6563      	strge	r3, [r4, #84]	; 0x54
 800645a:	81a3      	strhlt	r3, [r4, #12]
 800645c:	bd10      	pop	{r4, pc}

0800645e <__swrite>:
 800645e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	461f      	mov	r7, r3
 8006464:	898b      	ldrh	r3, [r1, #12]
 8006466:	05db      	lsls	r3, r3, #23
 8006468:	4605      	mov	r5, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4616      	mov	r6, r2
 800646e:	d505      	bpl.n	800647c <__swrite+0x1e>
 8006470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006474:	2302      	movs	r3, #2
 8006476:	2200      	movs	r2, #0
 8006478:	f000 f868 	bl	800654c <_lseek_r>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	4632      	mov	r2, r6
 800648a:	463b      	mov	r3, r7
 800648c:	4628      	mov	r0, r5
 800648e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	f000 b817 	b.w	80064c4 <_write_r>

08006496 <__sseek>:
 8006496:	b510      	push	{r4, lr}
 8006498:	460c      	mov	r4, r1
 800649a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649e:	f000 f855 	bl	800654c <_lseek_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	bf15      	itete	ne
 80064a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064b2:	81a3      	strheq	r3, [r4, #12]
 80064b4:	bf18      	it	ne
 80064b6:	81a3      	strhne	r3, [r4, #12]
 80064b8:	bd10      	pop	{r4, pc}

080064ba <__sclose>:
 80064ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064be:	f000 b813 	b.w	80064e8 <_close_r>
	...

080064c4 <_write_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4d07      	ldr	r5, [pc, #28]	; (80064e4 <_write_r+0x20>)
 80064c8:	4604      	mov	r4, r0
 80064ca:	4608      	mov	r0, r1
 80064cc:	4611      	mov	r1, r2
 80064ce:	2200      	movs	r2, #0
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fb faa1 	bl	8001a1a <_write>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_write_r+0x1e>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_write_r+0x1e>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	200002d0 	.word	0x200002d0

080064e8 <_close_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4d06      	ldr	r5, [pc, #24]	; (8006504 <_close_r+0x1c>)
 80064ec:	2300      	movs	r3, #0
 80064ee:	4604      	mov	r4, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	f7fb faad 	bl	8001a52 <_close>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_close_r+0x1a>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_close_r+0x1a>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	200002d0 	.word	0x200002d0

08006508 <_fstat_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d07      	ldr	r5, [pc, #28]	; (8006528 <_fstat_r+0x20>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	4611      	mov	r1, r2
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	f7fb faa8 	bl	8001a6a <_fstat>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	d102      	bne.n	8006524 <_fstat_r+0x1c>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	b103      	cbz	r3, 8006524 <_fstat_r+0x1c>
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	bd38      	pop	{r3, r4, r5, pc}
 8006526:	bf00      	nop
 8006528:	200002d0 	.word	0x200002d0

0800652c <_isatty_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4d06      	ldr	r5, [pc, #24]	; (8006548 <_isatty_r+0x1c>)
 8006530:	2300      	movs	r3, #0
 8006532:	4604      	mov	r4, r0
 8006534:	4608      	mov	r0, r1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	f7fb faa7 	bl	8001a8a <_isatty>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_isatty_r+0x1a>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_isatty_r+0x1a>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200002d0 	.word	0x200002d0

0800654c <_lseek_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d07      	ldr	r5, [pc, #28]	; (800656c <_lseek_r+0x20>)
 8006550:	4604      	mov	r4, r0
 8006552:	4608      	mov	r0, r1
 8006554:	4611      	mov	r1, r2
 8006556:	2200      	movs	r2, #0
 8006558:	602a      	str	r2, [r5, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	f7fb faa0 	bl	8001aa0 <_lseek>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_lseek_r+0x1e>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_lseek_r+0x1e>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200002d0 	.word	0x200002d0

08006570 <_read_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	; (8006590 <_read_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fb fa2e 	bl	80019e0 <_read>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_read_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_read_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200002d0 	.word	0x200002d0

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
